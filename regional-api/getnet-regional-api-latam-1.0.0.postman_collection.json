{
  "info": {
    "_postman_id": "79c4c3eb-a4bb-497f-aaca-2bff01176d9a",
    "name": "getnet-regional-api-latam-1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "SEP",
      "item": [
        {
          "name": "Seller authentication",
          "item": [
            {
              "name": "Access Token Generator",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"token\", data.access_token);\r",
                      "\r",
                      "const func_and_scenario_prefix = \"func1-sce1_1-\";\r",
                      "\r",
                      "uuid = require('uuid');\r",
                      "pm.environment.set(\"testing_control_key\", func_and_scenario_prefix + uuid.v4());\r",
                      "\r",
                      "let dateNow = new Date();\r",
                      "let tomorrow = new Date();\r",
                      "tomorrow.setDate(dateNow.getDate() + 1);\r",
                      "let thirtyDaysAgo = new Date();\r",
                      "thirtyDaysAgo.setDate(dateNow.getDate() - 30);\r",
                      "\r",
                      "\r",
                      "pm.environment.set(\"currentDateTime\", dateNow.toISOString());\r",
                      "pm.environment.set(\"diaSeguinte\", tomorrow.toISOString());\r",
                      "pm.environment.set(\"thirtyDaysAgo\", thirtyDaysAgo.toISOString());\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Token recuperado com sucesso\", function () {\r",
                      "    pm.response.to.not.be.error; \r",
                      "    pm.response.to.have.jsonBody(\"expires_in\", 3599);\r",
                      "    pm.response.to.not.have.jsonBody(\"payment.error\");});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "key": "password",
                      "value": "{{SECRET_ID}}",
                      "type": "string"
                    },
                    {
                      "key": "username",
                      "value": "{{CLIENT_ID}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "client_credentials",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/authentication/oauth2/access_token",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["authentication", "oauth2", "access_token"]
                }
              },
              "response": []
            }
          ],
          "description": "Access Token Generator\n\n```\nIt is the service where we obtain a secure access token to call the exposed APIs. It is through this service that our security structure performs access permission validations, to ensure that only users with valid credentials will access the services.\n\n ```"
        },
        {
          "name": "Card tokenization / Vault",
          "item": [
            {
              "name": "Card token Generator",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                      "    var data = JSON.parse(responseBody);\r",
                      "    pm.environment.set(\"number_token\", data.number_token);\r",
                      "    //console.log(pm.environment.get('token_visa'))\r",
                      "  });"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "//Cards AR\r",
                      "//    6502720013589570 - CABAL (cvv 699 validade 11/29)\r",
                      "//    6500870076437051 - CABAL (cvv 254 validade 11/29)\r",
                      "//    5895625664145911 - NARANJA\r",
                      "//    373953192351004  - AMEX (cvv 7386 validade 12/25)\r",
                      "//    4123220000000909 - VISA CREDIT\r",
                      "//\t  4231390000011336 - VISA CREDIT\r",
                      "//\t  4517510000000931 - VISA DEBIT\r",
                      "//    5308418330410236 - MASTER CREDIT\r",
                      "//\t  5491800000000537 - MASTER DEBIT\r",
                      "//    Card CL\r",
                      "//    4757755100002175 - Visa Debito\r",
                      "//    5597790000007280 - Mastercard Debito\r",
                      "//    5213120418132948 - Mastercard domestico\r",
                      "//    5110420000006938 - Mastercard internacional\r",
                      "//    4508830000001759 - Visa domestico\r",
                      "//    4025240000000948 - Visa internacional \r",
                      "//    37667202091579261 - Amex internacional \r",
                      "//    Cards MX\r",
                      "//    5188999100986013 - Mastercard - Credito\r",
                      "//    4931350008098878 - Visa - Credito\r",
                      "//    5062650005970377 - Carnet (Nacional) - Débito\r",
                      "//    376674798472005  - Amex (cvv 5595 validade 02/26) \r",
                      "//    6510000000000810 - Discover (Nacional) - Credito\r",
                      "//    Cartão BR \r",
                      "//    5155901222280001 - MASTERCARD\r",
                      "//    4012001037141112 - VISA\r",
                      "//    4705980000007171 - VISA PARCELADO\r",
                      "//    "
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json;charset=utf-8"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"card_number\": \"5597790000007280\"\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/tokens/card",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "tokens", "card"]
                }
              },
              "response": []
            },
            {
              "name": "Insert card to customer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": ["var data = pm.response.json();\r", "pm.environment.set(\"card_id\", data.card_id)"],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"number_token\": \"{{number_token}}\",\r\n  \"brand\": \"VISA\",\r\n  \"cardholder_name\": \"Marcos P Martins\",\r\n  \"expiration_month\": \"04\",\r\n  \"expiration_year\": \"32\",\r\n  \"customer_id\": \"123456789\",\r\n  \"cardholder_identification\": \"12345678912\",\r\n  \"verify_card\": false,\r\n  \"security_code\": \"123\"\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/cards",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "cards"]
                }
              },
              "response": []
            },
            {
              "name": "Get card by customer id and status",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json; charset=utf-8"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/cards?customer_id=123456789&status=active&country={{country}}&tenant=santander",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "cards"],
                  "query": [
                    {
                      "key": "customer_id",
                      "value": "123456789"
                    },
                    {
                      "key": "status",
                      "value": "active"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    },
                    {
                      "key": "tenant",
                      "value": "santander"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get card by card id",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json; charset=utf-8"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/cards/{{card_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "cards", "{{card_id}}"]
                }
              },
              "response": []
            },
            {
              "name": "Card verification",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"number_token\": \"{{number_token}}\",\r\n  \"brand\": \"Mastercard\",\r\n  \"cardholder_name\": \"Marcos P Martins\",\r\n  \"expiration_month\": \"12\",\r\n  \"expiration_year\": \"28\",\r\n  \"security_code\": \"123\"\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/cards/verification",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "cards", "verification"]
                }
              },
              "response": []
            },
            {
              "name": "Delete card by card id",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/cards/{{card_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "cards", "{{card_id}}"]
                }
              },
              "response": []
            }
          ],
          "description": "Vault\n\nCard token generator\n\n```\nIt is our service for generating a card PAN token, to improve security and not send the open card number, making requests safer.\n\n ```"
        },
        {
          "name": "Card token TSP",
          "item": [
            {
              "name": "TSP Card token Generator",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                      "    var data = JSON.parse(responseBody);\r",
                      "    pm.environment.set(\"number_token\", data.number_token);\r",
                      "    //console.log(pm.environment.get('token_visa'))\r",
                      "  });"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "    /*    \r",
                      "        ONLY VISA        | CVV\r",
                      "        4622943123041171 | 282\r",
                      "        4622943123041189 | 153\r",
                      "        4622943123041197 | 027\r",
                      "        4622943123041205 | 718\r",
                      "        4622943123041213 | 048\r",
                      "        Expiry date for all cards (2025-12)\r",
                      "\r",
                      "        CREDIT VISA\r",
                      "        4061901520738110 | 123\r",
                      "        4524880000001119 | 123\r",
                      "        4547894733333338 | 123\r",
                      "        4895370000000029 | 123\r",
                      "        4309184721010119 | 123\r",
                      "\r",
                      "    */"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disabledSystemHeaders": {}
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "accept",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json;charset=utf-8"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"card_number\": \"4309184721010119\"\r\n\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/tokens/card",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "tokens", "card"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Simple payment",
          "item": [
            {
              "name": "Payment authorization DEBIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 120,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"customer_241123\",\r\n        \"payment\": {\r\n            \"payment_method\": \"DEBIT\",\r\n            \"transaction_type\": \"FULL\",\r\n            \"save_card_data\": false,\r\n            \"number_installments\": 1,\r\n            \"soft_descriptor\": \"Loja de teste\",\r\n            \"card\": {\r\n                \"number_token\": \"{{number_token}}\",\r\n                \"expiration_month\": \"02\",\r\n                \"expiration_year\": \"26\",\r\n                \"cardholder_name\": \"teste\",\r\n                \"security_code\": \"595\"\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Payment authorization CREDIT",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 12000,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"customer_21123\",\r\n        \"payment\": {\r\n            \"payment_method\": \"CREDIT\",\r\n            \"transaction_type\": \"FULL\",\r\n            \"save_card_data\": false,\r\n            \"number_installments\": 1,\r\n            \"soft_descriptor\": \"Loja de teste\",\r\n            \"card\": {\r\n                \"number_token\": \"{{number_token}}\",\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"25\",\r\n                \"cardholder_name\": \"teste\",\r\n                \"security_code\": \"282\"\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "(BR and MX)Payments CREDIT with Installments",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 695000,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"customer_241123\",\r\n        \"payment\": {\r\n            \"payment_method\": \"CREDIT\",\r\n            \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n            \"save_card_data\": false,\r\n            \"number_installments\": 6,\r\n            \"soft_descriptor\": \"Loja de teste\",\r\n            \"card\": {\r\n                \"number_token\": \"{{number_token}}\",\r\n                \"expiration_month\": \"02\",\r\n                \"expiration_year\": \"26\",\r\n                \"cardholder_name\": \"teste\",\r\n                \"security_code\": \"595\"\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Capture V2",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"21210144-062b-4a2a-960e-4224e08fd543\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/capture",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "capture"]
                }
              },
              "response": []
            },
            {
              "name": "Cancel V2",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"{{payment_id}}\",\r\n    \"amount\": 120,\r\n    \"payment_method\": \"{{payment_method}}\",\r\n    \"custom_key\": \"Cancelamento_teste_{{$randomAlphaNumeric}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/cancel",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "cancel"]
                }
              },
              "response": []
            },
            {
              "name": "Payment info",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/hub-payment-info/v1/payments/info/73de2913-acc7-4b31-a8b9-c5861eab079a",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "hub-payment-info", "v1", "payments", "info", "73de2913-acc7-4b31-a8b9-c5861eab079a"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "payments with Antifraud",
          "item": [
            {
              "name": "Payments Antifraud DEBIT",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                      "    var data = JSON.parse(responseBody);\r",
                      "    pm.environment.set(\"number_token\", data.number_token);\r",
                      "    //console.log(pm.environment.get('token_visa'))\r",
                      "  });\r",
                      "\r",
                      "\r",
                      "// Brazil - CPF\r",
                      "\r",
                      "function gera_random(n) {\r",
                      "    const ranNum = Math.round(Math.random()*n);\r",
                      "    return ranNum;\r",
                      "}\r",
                      "function mod(dividendo,divisor) {\r",
                      "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                      "}\r",
                      "function gera_cpf() {\r",
                      "    const n = 9;\r",
                      "    const n1 = gera_random(n);\r",
                      "    const n2 = gera_random(n);\r",
                      "    const n3 = gera_random(n);\r",
                      "    const n4 = gera_random(n);\r",
                      "    const n5 = gera_random(n);\r",
                      "    const n6 = gera_random(n);\r",
                      "    const n7 = gera_random(n);\r",
                      "    const n8 = gera_random(n);\r",
                      "    const n9 = gera_random(n);\r",
                      "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                      "    d1 = 11 - (mod(d1,11));\r",
                      "    if (d1>=10) d1 = 0;\r",
                      "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                      "    d2 = 11 - (mod(d2,11));\r",
                      "    \r",
                      "    if (d2>=10) d2 = 0;         \r",
                      "      \r",
                      "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                      "}\r",
                      "\r",
                      "// Argentina - DNI\r",
                      "\r",
                      "function rand_dni() {\r",
                      "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                      "  sNum = formatNumberLength( num, 8 );\r",
                      "  return sNum + charDNI( sNum );\r",
                      "}\r",
                      "\r",
                      "function formatNumberLength(num, length) {\r",
                      "  var r = \"\" + num;\r",
                      "  while ( r.length < length ) {\r",
                      "    r = \"0\" + r;\r",
                      "  }\r",
                      "  return r;\r",
                      "}\r",
                      "\r",
                      "function charDNI(dni) {\r",
                      "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                      "  var pos = dni % 23;\r",
                      "  var letter = chain.substring( pos, pos + 1 );\r",
                      "  return letter;\r",
                      "}\r",
                      "\r",
                      "// Chile - RUT\r",
                      "\r",
                      "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                      "  let ruts = [];\r",
                      "  \r",
                      "  const rutOpts = {\r",
                      "    quantity: numberOfRuts,\r",
                      "    minValue: minValue,\r",
                      "    maxValue: maxValue\r",
                      "  };\r",
                      "\r",
                      "  function generateRuts() {\r",
                      "    var e, n, r, u, i;\r",
                      "    n = [];\r",
                      "    t = 0;\r",
                      "    while (t < rutOpts.quantity) {\r",
                      "      i = getRandomNumber();\r",
                      "      r = 0;\r",
                      "      e = false;\r",
                      "      while (r < n.length) {\r",
                      "        if (n[r].number === i) {\r",
                      "          e = true;\r",
                      "          break\r",
                      "        }\r",
                      "        r++\r",
                      "      }\r",
                      "      if (!e) {\r",
                      "        u = getMod(i);\r",
                      "        n.push({\r",
                      "          number: i,\r",
                      "          mod: u\r",
                      "        })\r",
                      "      }\r",
                      "      t++;\r",
                      "    }\r",
                      "    return ruts = n\r",
                      "  };\r",
                      "\r",
                      "  function getRandomNumber() {\r",
                      "    var t, e, n, r;\r",
                      "    r = rutOpts.minValue;\r",
                      "    n = rutOpts.maxValue;\r",
                      "    e = parseInt(t);\r",
                      "    if (!e) {\r",
                      "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                      "    } else {\r",
                      "      return e\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "  function getMod(t) {\r",
                      "    var e, n;\r",
                      "    e = 0;\r",
                      "    n = 1;\r",
                      "    while (t) {\r",
                      "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                      "      t = Math.floor(t / 10)\r",
                      "    }\r",
                      "    if (n) {\r",
                      "      return n - 1\r",
                      "    } else {\r",
                      "      return \"K\"\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "\r",
                      "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                      "  if (generatedRuts.length === 1) { \r",
                      "    return generatedRuts[0];\r",
                      "  }\r",
                      "  return generatedRuts;\r",
                      "}\r",
                      "\r",
                      "// Tipo de documentos\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                      "    pm.environment.set(\"document_number\", gera_cpf());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                      "    pm.environment.set(\"document_number\", rand_dni());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                      "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"DEBIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"24\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"831\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Payments Antifraud V2 CREDIT",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                      "    var data = JSON.parse(responseBody);\r",
                      "    pm.environment.set(\"number_token\", data.number_token);\r",
                      "    //console.log(pm.environment.get('token_visa'))\r",
                      "  });\r",
                      "\r",
                      "\r",
                      "// Brazil - CPF\r",
                      "\r",
                      "function gera_random(n) {\r",
                      "    const ranNum = Math.round(Math.random()*n);\r",
                      "    return ranNum;\r",
                      "}\r",
                      "function mod(dividendo,divisor) {\r",
                      "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                      "}\r",
                      "function gera_cpf() {\r",
                      "    const n = 9;\r",
                      "    const n1 = gera_random(n);\r",
                      "    const n2 = gera_random(n);\r",
                      "    const n3 = gera_random(n);\r",
                      "    const n4 = gera_random(n);\r",
                      "    const n5 = gera_random(n);\r",
                      "    const n6 = gera_random(n);\r",
                      "    const n7 = gera_random(n);\r",
                      "    const n8 = gera_random(n);\r",
                      "    const n9 = gera_random(n);\r",
                      "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                      "    d1 = 11 - (mod(d1,11));\r",
                      "    if (d1>=10) d1 = 0;\r",
                      "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                      "    d2 = 11 - (mod(d2,11));\r",
                      "    \r",
                      "    if (d2>=10) d2 = 0;         \r",
                      "      \r",
                      "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                      "}\r",
                      "\r",
                      "// Argentina - DNI\r",
                      "\r",
                      "function rand_dni() {\r",
                      "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                      "  sNum = formatNumberLength( num, 8 );\r",
                      "  return sNum + charDNI( sNum );\r",
                      "}\r",
                      "\r",
                      "function formatNumberLength(num, length) {\r",
                      "  var r = \"\" + num;\r",
                      "  while ( r.length < length ) {\r",
                      "    r = \"0\" + r;\r",
                      "  }\r",
                      "  return r;\r",
                      "}\r",
                      "\r",
                      "function charDNI(dni) {\r",
                      "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                      "  var pos = dni % 23;\r",
                      "  var letter = chain.substring( pos, pos + 1 );\r",
                      "  return letter;\r",
                      "}\r",
                      "\r",
                      "// Chile - RUT\r",
                      "\r",
                      "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                      "  let ruts = [];\r",
                      "  \r",
                      "  const rutOpts = {\r",
                      "    quantity: numberOfRuts,\r",
                      "    minValue: minValue,\r",
                      "    maxValue: maxValue\r",
                      "  };\r",
                      "\r",
                      "  function generateRuts() {\r",
                      "    var e, n, r, u, i;\r",
                      "    n = [];\r",
                      "    t = 0;\r",
                      "    while (t < rutOpts.quantity) {\r",
                      "      i = getRandomNumber();\r",
                      "      r = 0;\r",
                      "      e = false;\r",
                      "      while (r < n.length) {\r",
                      "        if (n[r].number === i) {\r",
                      "          e = true;\r",
                      "          break\r",
                      "        }\r",
                      "        r++\r",
                      "      }\r",
                      "      if (!e) {\r",
                      "        u = getMod(i);\r",
                      "        n.push({\r",
                      "          number: i,\r",
                      "          mod: u\r",
                      "        })\r",
                      "      }\r",
                      "      t++;\r",
                      "    }\r",
                      "    return ruts = n\r",
                      "  };\r",
                      "\r",
                      "  function getRandomNumber() {\r",
                      "    var t, e, n, r;\r",
                      "    r = rutOpts.minValue;\r",
                      "    n = rutOpts.maxValue;\r",
                      "    e = parseInt(t);\r",
                      "    if (!e) {\r",
                      "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                      "    } else {\r",
                      "      return e\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "  function getMod(t) {\r",
                      "    var e, n;\r",
                      "    e = 0;\r",
                      "    n = 1;\r",
                      "    while (t) {\r",
                      "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                      "      t = Math.floor(t / 10)\r",
                      "    }\r",
                      "    if (n) {\r",
                      "      return n - 1\r",
                      "    } else {\r",
                      "      return \"K\"\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "\r",
                      "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                      "  if (generatedRuts.length === 1) { \r",
                      "    return generatedRuts[0];\r",
                      "  }\r",
                      "  return generatedRuts;\r",
                      "}\r",
                      "\r",
                      "// Tipo de documentos\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                      "    pm.environment.set(\"document_number\", gera_cpf());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                      "    pm.environment.set(\"document_number\", rand_dni());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                      "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT_AUTHORIZATION\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"25\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"736\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Payments Antifraud V2 CREDIT simplificado",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                      "    var data = JSON.parse(responseBody);\r",
                      "    pm.environment.set(\"number_token\", data.number_token);\r",
                      "    //console.log(pm.environment.get('token_visa'))\r",
                      "  });\r",
                      "\r",
                      "\r",
                      "// Brazil - CPF\r",
                      "\r",
                      "function gera_random(n) {\r",
                      "    const ranNum = Math.round(Math.random()*n);\r",
                      "    return ranNum;\r",
                      "}\r",
                      "function mod(dividendo,divisor) {\r",
                      "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                      "}\r",
                      "function gera_cpf() {\r",
                      "    const n = 9;\r",
                      "    const n1 = gera_random(n);\r",
                      "    const n2 = gera_random(n);\r",
                      "    const n3 = gera_random(n);\r",
                      "    const n4 = gera_random(n);\r",
                      "    const n5 = gera_random(n);\r",
                      "    const n6 = gera_random(n);\r",
                      "    const n7 = gera_random(n);\r",
                      "    const n8 = gera_random(n);\r",
                      "    const n9 = gera_random(n);\r",
                      "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                      "    d1 = 11 - (mod(d1,11));\r",
                      "    if (d1>=10) d1 = 0;\r",
                      "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                      "    d2 = 11 - (mod(d2,11));\r",
                      "    \r",
                      "    if (d2>=10) d2 = 0;         \r",
                      "      \r",
                      "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                      "}\r",
                      "\r",
                      "// Argentina - DNI\r",
                      "\r",
                      "function rand_dni() {\r",
                      "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                      "  sNum = formatNumberLength( num, 8 );\r",
                      "  return sNum + charDNI( sNum );\r",
                      "}\r",
                      "\r",
                      "function formatNumberLength(num, length) {\r",
                      "  var r = \"\" + num;\r",
                      "  while ( r.length < length ) {\r",
                      "    r = \"0\" + r;\r",
                      "  }\r",
                      "  return r;\r",
                      "}\r",
                      "\r",
                      "function charDNI(dni) {\r",
                      "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                      "  var pos = dni % 23;\r",
                      "  var letter = chain.substring( pos, pos + 1 );\r",
                      "  return letter;\r",
                      "}\r",
                      "\r",
                      "// Chile - RUT\r",
                      "\r",
                      "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                      "  let ruts = [];\r",
                      "  \r",
                      "  const rutOpts = {\r",
                      "    quantity: numberOfRuts,\r",
                      "    minValue: minValue,\r",
                      "    maxValue: maxValue\r",
                      "  };\r",
                      "\r",
                      "  function generateRuts() {\r",
                      "    var e, n, r, u, i;\r",
                      "    n = [];\r",
                      "    t = 0;\r",
                      "    while (t < rutOpts.quantity) {\r",
                      "      i = getRandomNumber();\r",
                      "      r = 0;\r",
                      "      e = false;\r",
                      "      while (r < n.length) {\r",
                      "        if (n[r].number === i) {\r",
                      "          e = true;\r",
                      "          break\r",
                      "        }\r",
                      "        r++\r",
                      "      }\r",
                      "      if (!e) {\r",
                      "        u = getMod(i);\r",
                      "        n.push({\r",
                      "          number: i,\r",
                      "          mod: u\r",
                      "        })\r",
                      "      }\r",
                      "      t++;\r",
                      "    }\r",
                      "    return ruts = n\r",
                      "  };\r",
                      "\r",
                      "  function getRandomNumber() {\r",
                      "    var t, e, n, r;\r",
                      "    r = rutOpts.minValue;\r",
                      "    n = rutOpts.maxValue;\r",
                      "    e = parseInt(t);\r",
                      "    if (!e) {\r",
                      "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                      "    } else {\r",
                      "      return e\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "  function getMod(t) {\r",
                      "    var e, n;\r",
                      "    e = 0;\r",
                      "    n = 1;\r",
                      "    while (t) {\r",
                      "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                      "      t = Math.floor(t / 10)\r",
                      "    }\r",
                      "    if (n) {\r",
                      "      return n - 1\r",
                      "    } else {\r",
                      "      return \"K\"\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "\r",
                      "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                      "  if (generatedRuts.length === 1) { \r",
                      "    return generatedRuts[0];\r",
                      "  }\r",
                      "  return generatedRuts;\r",
                      "}\r",
                      "\r",
                      "// Tipo de documentos\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                      "    pm.environment.set(\"document_number\", gera_cpf());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                      "    pm.environment.set(\"document_number\", rand_dni());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                      "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 10000,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"02\",\r\n                \"expiration_year\": \"32\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"959\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2025\"\r\n            },\r\n            \"customer\": {\r\n                \"document_type\": \"MX_RFC\",\r\n                \"document_number\": \"VECJ880326\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"teste@hotmail.com\"\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "(BR and MX) Payments Antifraud CREDIT With installments",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                      "    var data = JSON.parse(responseBody);\r",
                      "    pm.environment.set(\"number_token\", data.number_token);\r",
                      "    //console.log(pm.environment.get('token_visa'))\r",
                      "  });\r",
                      "\r",
                      "\r",
                      "// Brazil - CPF\r",
                      "\r",
                      "function gera_random(n) {\r",
                      "    const ranNum = Math.round(Math.random()*n);\r",
                      "    return ranNum;\r",
                      "}\r",
                      "function mod(dividendo,divisor) {\r",
                      "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                      "}\r",
                      "function gera_cpf() {\r",
                      "    const n = 9;\r",
                      "    const n1 = gera_random(n);\r",
                      "    const n2 = gera_random(n);\r",
                      "    const n3 = gera_random(n);\r",
                      "    const n4 = gera_random(n);\r",
                      "    const n5 = gera_random(n);\r",
                      "    const n6 = gera_random(n);\r",
                      "    const n7 = gera_random(n);\r",
                      "    const n8 = gera_random(n);\r",
                      "    const n9 = gera_random(n);\r",
                      "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                      "    d1 = 11 - (mod(d1,11));\r",
                      "    if (d1>=10) d1 = 0;\r",
                      "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                      "    d2 = 11 - (mod(d2,11));\r",
                      "    \r",
                      "    if (d2>=10) d2 = 0;         \r",
                      "      \r",
                      "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                      "}\r",
                      "\r",
                      "// Argentina - DNI\r",
                      "\r",
                      "function rand_dni() {\r",
                      "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                      "  sNum = formatNumberLength( num, 8 );\r",
                      "  return sNum + charDNI( sNum );\r",
                      "}\r",
                      "\r",
                      "function formatNumberLength(num, length) {\r",
                      "  var r = \"\" + num;\r",
                      "  while ( r.length < length ) {\r",
                      "    r = \"0\" + r;\r",
                      "  }\r",
                      "  return r;\r",
                      "}\r",
                      "\r",
                      "function charDNI(dni) {\r",
                      "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                      "  var pos = dni % 23;\r",
                      "  var letter = chain.substring( pos, pos + 1 );\r",
                      "  return letter;\r",
                      "}\r",
                      "\r",
                      "// Chile - RUT\r",
                      "\r",
                      "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                      "  let ruts = [];\r",
                      "  \r",
                      "  const rutOpts = {\r",
                      "    quantity: numberOfRuts,\r",
                      "    minValue: minValue,\r",
                      "    maxValue: maxValue\r",
                      "  };\r",
                      "\r",
                      "  function generateRuts() {\r",
                      "    var e, n, r, u, i;\r",
                      "    n = [];\r",
                      "    t = 0;\r",
                      "    while (t < rutOpts.quantity) {\r",
                      "      i = getRandomNumber();\r",
                      "      r = 0;\r",
                      "      e = false;\r",
                      "      while (r < n.length) {\r",
                      "        if (n[r].number === i) {\r",
                      "          e = true;\r",
                      "          break\r",
                      "        }\r",
                      "        r++\r",
                      "      }\r",
                      "      if (!e) {\r",
                      "        u = getMod(i);\r",
                      "        n.push({\r",
                      "          number: i,\r",
                      "          mod: u\r",
                      "        })\r",
                      "      }\r",
                      "      t++;\r",
                      "    }\r",
                      "    return ruts = n\r",
                      "  };\r",
                      "\r",
                      "  function getRandomNumber() {\r",
                      "    var t, e, n, r;\r",
                      "    r = rutOpts.minValue;\r",
                      "    n = rutOpts.maxValue;\r",
                      "    e = parseInt(t);\r",
                      "    if (!e) {\r",
                      "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                      "    } else {\r",
                      "      return e\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "  function getMod(t) {\r",
                      "    var e, n;\r",
                      "    e = 0;\r",
                      "    n = 1;\r",
                      "    while (t) {\r",
                      "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                      "      t = Math.floor(t / 10)\r",
                      "    }\r",
                      "    if (n) {\r",
                      "      return n - 1\r",
                      "    } else {\r",
                      "      return \"K\"\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "\r",
                      "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                      "  if (generatedRuts.length === 1) { \r",
                      "    return generatedRuts[0];\r",
                      "  }\r",
                      "  return generatedRuts;\r",
                      "}\r",
                      "\r",
                      "// Tipo de documentos\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                      "    pm.environment.set(\"document_number\", gera_cpf());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                      "    pm.environment.set(\"document_number\", rand_dni());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                      "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT_AUTHORIZATION\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n            \"number_installments\": 4,\r\n            \"card\": {\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"25\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"801\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Capture",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"{{payment_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/capture",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "capture"]
                }
              },
              "response": []
            },
            {
              "name": "Cancel",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"{{payment_id}}\",\r\n    \"amount\": 1,\r\n    \"payment_method\": \"{{payment_method}}\",\r\n    \"custom_key\": \"Cancelamento_teste_{{$randomAlphaNumeric}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/cancel",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "cancel"]
                }
              },
              "response": []
            },
            {
              "name": "Payment info",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/hub-payment-info/v1/payments/info/{{payment_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "hub-payment-info", "v1", "payments", "info", "{{payment_id}}"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "(AR and CL)Quotes",
          "item": [
            {
              "name": "(AR and CL) Quotes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Recupera o schema e quote_id da resposta \r",
                      "const jsonData = JSON.parse(responseBody);\r",
                      "pm.environment.set(\"quote_id\", jsonData.options[0].quote_id);\r",
                      "pm.environment.set(\"schema\", jsonData.options[0].schema);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "    /*Cards AR\r",
                      "    CABAL - 6502720013589570 cvv 699 validade 11-29\r",
                      "          - 6500870076437051 cvv 254 validade 11-29\r",
                      "    NARANJA - 5895625664145911\r",
                      "    AMEX - 373953192351004   cvv = 8031   validade = 12/24\r",
                      "    VISA - 4123220000000909 - CREDIT\r",
                      "\t     - 4231390000011336 - CREDIT\r",
                      "\t     - 4517510000000931 - DEBIT\r",
                      "    MASTER - 5308418330410236 - CREDIT\r",
                      "\t       - 5491800000000537 - DEBIT\r",
                      "    Card CL\r",
                      "    5213120418132948 - Mastercard domestico\r",
                      "    5110420000006938 - Mastercard internacional\r",
                      "    4508830000001759 - Visa domestico\r",
                      "    4025240000000948 - Visa internacional \r",
                      "    37667202091579261 - Amex internacional \r",
                      "    Cards MX\r",
                      "    5188999100986013 - Mastercard - Credito\r",
                      "    4931350008098878 - Visa - Credito\r",
                      "    5062650005970377 - Carnet (Nacional) - Débito\r",
                      "    376674798472005 / Venc. 02/26, Cvv 5595 - Amex - Credito\r",
                      "    6510000000000810 - Discover (Nacional) - Credito\r",
                      "    */"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"amount\": 500000,\r\n    \"bin\": \"5213120\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/quotes",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "quotes"]
                }
              },
              "response": []
            },
            {
              "name": "(AR and CL) Payments with quotes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n            \"number_installments\": 6,\r\n            \"card\": {\r\n                \"expiration_month\": \"11\",\r\n                \"expiration_year\": \"29\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"801\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"installment\": {\r\n                \"quote_id\": \"{{quote_id}}\",\r\n                \"schema\": \"{{schema}}\"\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "https://api.pre.globalgetnet.com/dpm/payments-gwproxy/v2/payments",
                  "protocol": "https",
                  "host": ["api", "pre", "globalgetnet", "com"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "(AR) Payments with plan_z quote",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n            \"number_installments\": 6,\r\n            \"card\": {\r\n                \"expiration_month\": \"11\",\r\n                \"expiration_year\": \"29\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"801\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"installment\": {\r\n                \"schema\": \"plan_z\"\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "https://api.pre.globalgetnet.com/dpm/payments-gwproxy/v2/payments",
                  "protocol": "https",
                  "host": ["api", "pre", "globalgetnet", "com"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "(AR and CL) Payments with quotes and antifraud",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n            \"number_installments\": 6,\r\n            \"card\": {\r\n                \"expiration_month\": \"11\",\r\n                \"expiration_year\": \"29\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"801\",\r\n                \"brand\": \"VISA\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            },\r\n            \"installment\": {\r\n                \"quote_id\": \"{{quote_id}}\",\r\n                \"schema\": \"{{schema}}\"\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "https://api.pre.globalgetnet.com/dpm/payments-gwproxy/v2/payments",
                  "protocol": "https",
                  "host": ["api", "pre", "globalgetnet", "com"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Combined payments",
          "item": [
            {
              "name": "combined payments",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 11000,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payments\": [\r\n            {\r\n                \"amount\": \"5500\",\r\n                \"idempotency_key\": \"{{$guid}}\",\r\n                \"payment_id\": \"{{$guid}}\",\r\n                \"save_card_data\": false,\r\n                \"order_id\": \"test_order_id_1\",\r\n                \"payment_method\": \"CREDIT\",\r\n                \"transaction_type\": \"FULL\",\r\n                \"number_installments\": 1,\r\n                \"dynamic_mcc\": \"1234\",\r\n                \"card\": {\r\n                    \"number_token\": \"b48059d0e55a2976a1398c14ac71af4b200733a72eb4b77eeedd7960f2132761f37b56e4164474d5366722e73c3b20a7019105ce2dfb79a229b55a39b80736df\",\r\n                    \"expiration_month\": \"11\",\r\n                    \"expiration_year\": \"26\",\r\n                    \"cardholder_name\": \"CESAR A F CARA\",\r\n                    \"security_code\": \"412\"\r\n                },\r\n                \"billing_address\": {\r\n                    \"street\": \"R a\",\r\n                    \"number\": \"1\",\r\n                    \"district\": \"B\",\r\n                    \"city\": \"City Z\",\r\n                    \"state\": \"SP\",\r\n                    \"country\": \"Brazil\",\r\n                    \"postal_code\": \"05781000\",\r\n                    \"complement\": \"NA\",\r\n                    \"type\": \"RES\"\r\n                }\r\n            },\r\n            {\r\n                \"amount\": \"5500\",\r\n                \"idempotency_key\": \"{{$guid}}\",\r\n                \"payment_id\": \"{{$guid}}\",\r\n                \"save_card_data\": false,\r\n                \"order_id\": \"test_order_id_2\",\r\n                \"transaction_type\": \"FULL\",\r\n                \"payment_method\": \"DEBIT\",\r\n                \"number_installments\": 1,\r\n                \"dynamic_mcc\": \"1234\",\r\n                \"card\": {\r\n                    \"number_token\": \"d886044d13dcab0e6cde40ec33bef5e97a51cfb265491f9fe3ede6450b1871b971dab184776cc8f67aecc814006345d6c0c283357d79daae22a18096073e438c\",\r\n                    \"expiration_month\": \"10\",\r\n                    \"expiration_year\": \"30\",\r\n                    \"cardholder_name\": \"CESAR A F CARA\",\r\n                    \"security_code\": \"412\"\r\n                },\r\n                \"billing_address\": {\r\n                    \"street\": \"R a\",\r\n                    \"number\": \"1\",\r\n                    \"district\": \"B\",\r\n                    \"city\": \"City Z\",\r\n                    \"state\": \"SP\",\r\n                    \"country\": \"Brazil\",\r\n                    \"postal_code\": \"05781000\",\r\n                    \"complement\": \"NA\",\r\n                    \"type\": \"RES\"\r\n                }\r\n            }\r\n        ],\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"device_id\": \"id\",\r\n                \"ip_address\": \"127.0.0.0\"\r\n            },\r\n            \"customer\": {\r\n                \"document_type\": \"RUT\",\r\n                \"document_number\": \"02441356709\",\r\n                \"email\": \"aceitei@getnet.com.br\",\r\n                \"name\": \"Jose da Silva\",\r\n                \"phone_number\": \"11999999999\",\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"R B\",\r\n                        \"number\": \"2\",\r\n                        \"district\": \"X\",\r\n                        \"city\": \"Oros\",\r\n                        \"state\": \"CE\",\r\n                        \"country\": \"Brazil\",\r\n                        \"postal_code\": \"63520000\",\r\n                        \"complement\": \"NA\",\r\n                        \"type\": \"R\"\r\n                    },\r\n                    \"name\": \"Jose da Silva\",\r\n                    \"phone_number\": \"11999999999\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"id\": \"101803\",\r\n                        \"name\": \"COPO TERMICO 473ML PRETO STANLEY\",\r\n                        \"price\": 139.9,\r\n                        \"quantity\": 1,\r\n                        \"discount\": 0.0,\r\n                        \"deliveryType\": \"PAC\",\r\n                        \"categoryId\": \"913\",\r\n                        \"sellerId\": \"MSC002\",\r\n                        \"taxValue\": 0.00,\r\n                        \"taxRate\": 0.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/combined",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "combined"]
                }
              },
              "response": []
            },
            {
              "name": "combined payments with quotes",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 15538,\r\n        \"currency\": \"ARS\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payments\": [\r\n            {\r\n                \"amount\": \"5180\",\r\n                \"idempotency_key\": \"{{$guid}}\",\r\n                \"save_card_data\": false,\r\n                \"order_id\": \"test_order_id_1\",\r\n                \"payment_method\": \"CREDIT\",\r\n                \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n                \"number_installments\": 3,\r\n                \"dynamic_mcc\": \"1234\",\r\n                \"card\": {\r\n                    \"number_token\": \"{{number_token}}\",\r\n                    \"expiration_month\": \"11\",\r\n                    \"expiration_year\": \"26\",\r\n                    \"cardholder_name\": \"CESAR A F CARA\",\r\n                    \"security_code\": \"412\"\r\n                },\r\n                \"billing_address\": {\r\n                    \"street\": \"R a\",\r\n                    \"number\": \"1\",\r\n                    \"district\": \"B\",\r\n                    \"city\": \"City Z\",\r\n                    \"state\": \"SP\",\r\n                    \"country\": \"Brazil\",\r\n                    \"postal_code\": \"05781000\",\r\n                    \"complement\": \"N/A\",\r\n                    \"type\": \"RES\"\r\n                },\r\n                \"installment\": {\r\n                    \"quote_id\": \"{{quote_id}}\",\r\n                    \"schema\": \"{{schema}}\"\r\n                }\r\n            },\r\n            {\r\n                \"amount\": \"5179\",\r\n                \"idempotency_key\": \"{{$guid}}\",\r\n                \"save_card_data\": false,\r\n                \"order_id\": \"test_order_id_2\",\r\n                \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n                \"payment_method\": \"CREDIT\",\r\n                \"number_installments\": 2,\r\n                \"dynamic_mcc\": \"1234\",\r\n                \"card\": {\r\n                    \"number_token\": \"{{number_token}}\",\r\n                    \"expiration_month\": \"10\",\r\n                    \"expiration_year\": \"30\",\r\n                    \"cardholder_name\": \"CESAR A F CARA\",\r\n                    \"security_code\": \"412\"\r\n                },\r\n                \"billing_address\": {\r\n                    \"street\": \"R a\",\r\n                    \"number\": \"1\",\r\n                    \"district\": \"B\",\r\n                    \"city\": \"City Z\",\r\n                    \"state\": \"SP\",\r\n                    \"country\": \"Brazil\",\r\n                    \"postal_code\": \"05781000\",\r\n                    \"complement\": \"N/A\",\r\n                    \"type\": \"RES\"\r\n                },\r\n                \"installment\": {\r\n                    \"quote_id\": \"{{quote_id}}\",\r\n                    \"schema\": \"{{schema}}\"\r\n                }\r\n            },\r\n            {\r\n                \"amount\": \"5179\",\r\n                \"idempotency_key\": \"{{$guid}}\",\r\n                \"save_card_data\": false,\r\n                \"order_id\": \"test_order_id_3\",\r\n                \"payment_method\": \"CREDIT\",\r\n                \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n                \"number_installments\": 7,\r\n                \"dynamic_mcc\": \"1234\",\r\n                \"card\": {\r\n                    \"number_token\": \"{{number_token}}\",\r\n                    \"expiration_month\": \"09\",\r\n                    \"expiration_year\": \"25\",\r\n                    \"cardholder_name\": \"CESAR A F CARA\",\r\n                    \"security_code\": \"412\"\r\n                },\r\n                \"billing_address\": {\r\n                    \"street\": \"R a\",\r\n                    \"number\": \"1\",\r\n                    \"district\": \"B\",\r\n                    \"city\": \"City Z\",\r\n                    \"state\": \"SP\",\r\n                    \"country\": \"Brazil\",\r\n                    \"postal_code\": \"05781000\",\r\n                    \"complement\": \"N/A\",\r\n                    \"type\": \"RES\"\r\n                },\r\n                \"installment\": {\r\n                    \"quote_id\": \"{{quote_id}}\",\r\n                    \"schema\": \"{{schema}}\"\r\n                }\r\n            }\r\n        ],\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"device_id\": \"id\",\r\n                \"ip_address\": \"127.0.0.0\"\r\n            },\r\n            \"customer\": {\r\n                \"document_type\": \"RUT\",\r\n                \"document_number\": \"02441356709\",\r\n                \"email\": \"aceitei@getnet.com.br\",\r\n                \"name\": \"Jose da Silva\",\r\n                \"phone_number\": \"11999999999\",\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"R B\",\r\n                        \"number\": \"2\",\r\n                        \"district\": \"X\",\r\n                        \"city\": \"Oros\",\r\n                        \"state\": \"CE\",\r\n                        \"country\": \"Brazil\",\r\n                        \"postal_code\": \"63520000\",\r\n                        \"complement\": \"NA\",\r\n                        \"type\": \"R\"\r\n                    },\r\n                    \"name\": \"Jose da Silva\",\r\n                    \"phone_number\": \"11999999999\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"id\": \"101803\",\r\n                        \"name\": \"COPO TERMICO 473ML PRETO STANLEY\",\r\n                        \"price\": 139.9,\r\n                        \"quantity\": 1,\r\n                        \"discount\": 0.0,\r\n                        \"deliveryType\": \"PAC\",\r\n                        \"categoryId\": \"913\",\r\n                        \"sellerId\": \"MSC002\",\r\n                        \"taxValue\": 0.00,\r\n                        \"taxRate\": 0.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/combined",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "combined"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Pre-auth",
          "item": [
            {
              "name": "Pre authorization payments",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);\r",
                      "pm.environment.set(\"transaction_id\", data.transaction_id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 12000,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"customer_21123\",\r\n        \"payment\": {\r\n            \"payment_method\": \"CREDIT_PRE_AUTHORIZATION\",\r\n            \"transaction_type\": \"FULL\",\r\n            \"save_card_data\": false,\r\n            \"number_installments\": 1,\r\n            \"soft_descriptor\": \"Loja de teste\",\r\n            \"card\": {\r\n                \"number_token\": \"{{number_token}}\",\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"25\",\r\n                \"cardholder_name\": \"teste\",\r\n                \"security_code\": \"8031\"\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                },
                "description": "Generated from cURL: curl --location 'https://localhost:3000/v1/authenticated/preauthorization' \\\r\n--header 'x-antifraud: true' \\\r\n--header 'x-antifraud-service: cybersource' \\\r\n--header 'x-disable-conciliator: true' \\\r\n--header 'x-merchant-id: 51554222' \\\r\n--header 'x-password: eyJ0eXAiOiJKV1QiLCJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIn0' \\\r\n--header 'x-seller-id: d2002919-d898-4915-a0d3-7cd08c4e9558' \\\r\n--header 'x-terminal-id: E500451502' \\\r\n--header 'x-trace-id: ec89422d-3c9b-4a7b-8f2b-d397cb10afaa' \\\r\n--header 'x-username: PLAT_XXIII_51554222' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{\r\n    \"currency\": \"BRL\",\r\n    \"customer_id\": \"6806e8cb-b27d-48b2-97b8-5c985a24fde5\",\r\n    \"disable_conciliator\": true,\r\n    \"disable_probe\": true,\r\n    \"dynamic_mcc\": \"1234\",\r\n    \"idempotency_key\": \"57d3e6ae-1517-4ba9-bb32-5cccf3de436a\",\r\n    \"number_installments\": 5,\r\n    \"order_id\": \"4a2a0cb0-782a-412c-8afc-0ee2e61a0df5\",\r\n    \"payment_id\": \"acf763c6-2c8f-4928-aca9-4f39e8693c61\",\r\n    \"payment_method\": \"CREDIT_PRE_AUTHORIZATION\",\r\n    \"save_card_data\": false,\r\n    \"amount\": 500505,\r\n    \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n    \"soft_descriptor\": \"MEUECOMM*ORDER10187383\",\r\n    \"card\": {\r\n        \"brand\": \"mastercard\",\r\n        \"cardholder_name\": \"Roland Deschain\",\r\n        \"expiration_month\": \"09\",\r\n        \"expiration_year\": \"30\",\r\n        \"number\": \"5155901222280001\",\r\n        \"security_code\": \"517\"\r\n    },\r\n    \"additional_data\": {\r\n        \"split_flag\": false\r\n    }\r\n}'"
              },
              "response": []
            },
            {
              "name": "(CL + AR) Pre authorization payments with coutas",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);\r",
                      "pm.environment.set(\"transaction_id\", data.transaction_id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT_PRE_AUTHORIZATION\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n            \"number_installments\": 6,\r\n            \"card\": {\r\n                \"expiration_month\": \"11\",\r\n                \"expiration_year\": \"29\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"801\",\r\n                \"brand\": \"VISA\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            },\r\n            \"installment\": {\r\n                \"quote_id\": \"{{quote_id}}\",\r\n                \"schema\": \"{{schema}}\"\r\n            }\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                },
                "description": "Generated from cURL: curl --location 'https://localhost:3000/v1/authenticated/preauthorization' \\\r\n--header 'x-antifraud: true' \\\r\n--header 'x-antifraud-service: cybersource' \\\r\n--header 'x-disable-conciliator: true' \\\r\n--header 'x-merchant-id: 51554222' \\\r\n--header 'x-password: eyJ0eXAiOiJKV1QiLCJhbGciOiJkaXIiLCJlbmMiOiJBMjU2Q0JDLUhTNTEyIn0' \\\r\n--header 'x-seller-id: d2002919-d898-4915-a0d3-7cd08c4e9558' \\\r\n--header 'x-terminal-id: E500451502' \\\r\n--header 'x-trace-id: ec89422d-3c9b-4a7b-8f2b-d397cb10afaa' \\\r\n--header 'x-username: PLAT_XXIII_51554222' \\\r\n--header 'Content-Type: application/json' \\\r\n--data '{\r\n    \"currency\": \"BRL\",\r\n    \"customer_id\": \"6806e8cb-b27d-48b2-97b8-5c985a24fde5\",\r\n    \"disable_conciliator\": true,\r\n    \"disable_probe\": true,\r\n    \"dynamic_mcc\": \"1234\",\r\n    \"idempotency_key\": \"57d3e6ae-1517-4ba9-bb32-5cccf3de436a\",\r\n    \"number_installments\": 5,\r\n    \"order_id\": \"4a2a0cb0-782a-412c-8afc-0ee2e61a0df5\",\r\n    \"payment_id\": \"acf763c6-2c8f-4928-aca9-4f39e8693c61\",\r\n    \"payment_method\": \"CREDIT_PRE_AUTHORIZATION\",\r\n    \"save_card_data\": false,\r\n    \"amount\": 500505,\r\n    \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n    \"soft_descriptor\": \"MEUECOMM*ORDER10187383\",\r\n    \"card\": {\r\n        \"brand\": \"mastercard\",\r\n        \"cardholder_name\": \"Roland Deschain\",\r\n        \"expiration_month\": \"09\",\r\n        \"expiration_year\": \"30\",\r\n        \"number\": \"5155901222280001\",\r\n        \"security_code\": \"517\"\r\n    },\r\n    \"additional_data\": {\r\n        \"split_flag\": false\r\n    }\r\n}'"
              },
              "response": []
            },
            {
              "name": "Pre auth payment with Antifraud",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Brazil - CPF\r",
                      "\r",
                      "function gera_random(n) {\r",
                      "    const ranNum = Math.round(Math.random()*n);\r",
                      "    return ranNum;\r",
                      "}\r",
                      "function mod(dividendo,divisor) {\r",
                      "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                      "}\r",
                      "function gera_cpf() {\r",
                      "    const n = 9;\r",
                      "    const n1 = gera_random(n);\r",
                      "    const n2 = gera_random(n);\r",
                      "    const n3 = gera_random(n);\r",
                      "    const n4 = gera_random(n);\r",
                      "    const n5 = gera_random(n);\r",
                      "    const n6 = gera_random(n);\r",
                      "    const n7 = gera_random(n);\r",
                      "    const n8 = gera_random(n);\r",
                      "    const n9 = gera_random(n);\r",
                      "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                      "    d1 = 11 - (mod(d1,11));\r",
                      "    if (d1>=10) d1 = 0;\r",
                      "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                      "    d2 = 11 - (mod(d2,11));\r",
                      "    \r",
                      "    if (d2>=10) d2 = 0;         \r",
                      "      \r",
                      "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                      "}\r",
                      "\r",
                      "// Argentina - DNI\r",
                      "\r",
                      "function rand_dni() {\r",
                      "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                      "  sNum = formatNumberLength( num, 8 );\r",
                      "  return sNum + charDNI( sNum );\r",
                      "}\r",
                      "\r",
                      "function formatNumberLength(num, length) {\r",
                      "  var r = \"\" + num;\r",
                      "  while ( r.length < length ) {\r",
                      "    r = \"0\" + r;\r",
                      "  }\r",
                      "  return r;\r",
                      "}\r",
                      "\r",
                      "function charDNI(dni) {\r",
                      "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                      "  var pos = dni % 23;\r",
                      "  var letter = chain.substring( pos, pos + 1 );\r",
                      "  return letter;\r",
                      "}\r",
                      "\r",
                      "// Chile - RUT\r",
                      "\r",
                      "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                      "  let ruts = [];\r",
                      "  \r",
                      "  const rutOpts = {\r",
                      "    quantity: numberOfRuts,\r",
                      "    minValue: minValue,\r",
                      "    maxValue: maxValue\r",
                      "  };\r",
                      "\r",
                      "  function generateRuts() {\r",
                      "    var e, n, r, u, i;\r",
                      "    n = [];\r",
                      "    t = 0;\r",
                      "    while (t < rutOpts.quantity) {\r",
                      "      i = getRandomNumber();\r",
                      "      r = 0;\r",
                      "      e = false;\r",
                      "      while (r < n.length) {\r",
                      "        if (n[r].number === i) {\r",
                      "          e = true;\r",
                      "          break\r",
                      "        }\r",
                      "        r++\r",
                      "      }\r",
                      "      if (!e) {\r",
                      "        u = getMod(i);\r",
                      "        n.push({\r",
                      "          number: i,\r",
                      "          mod: u\r",
                      "        })\r",
                      "      }\r",
                      "      t++;\r",
                      "    }\r",
                      "    return ruts = n\r",
                      "  };\r",
                      "\r",
                      "  function getRandomNumber() {\r",
                      "    var t, e, n, r;\r",
                      "    r = rutOpts.minValue;\r",
                      "    n = rutOpts.maxValue;\r",
                      "    e = parseInt(t);\r",
                      "    if (!e) {\r",
                      "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                      "    } else {\r",
                      "      return e\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "  function getMod(t) {\r",
                      "    var e, n;\r",
                      "    e = 0;\r",
                      "    n = 1;\r",
                      "    while (t) {\r",
                      "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                      "      t = Math.floor(t / 10)\r",
                      "    }\r",
                      "    if (n) {\r",
                      "      return n - 1\r",
                      "    } else {\r",
                      "      return \"K\"\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "\r",
                      "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                      "  if (generatedRuts.length === 1) { \r",
                      "    return generatedRuts[0];\r",
                      "  }\r",
                      "  return generatedRuts;\r",
                      "}\r",
                      "\r",
                      "// Tipo de documentos\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                      "    pm.environment.set(\"document_number\", gera_cpf());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                      "    pm.environment.set(\"document_number\", rand_dni());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                      "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT_PRE_AUTHORIZATION\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"11\",\r\n                \"expiration_year\": \"29\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"8031\",\r\n                \"brand\": \"AMEX\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Payments Antifraud V2 PRE AUTH simplificado",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                      "    var data = JSON.parse(responseBody);\r",
                      "    pm.environment.set(\"number_token\", data.number_token);\r",
                      "    //console.log(pm.environment.get('token_visa'))\r",
                      "  });\r",
                      "\r",
                      "\r",
                      "// Brazil - CPF\r",
                      "\r",
                      "function gera_random(n) {\r",
                      "    const ranNum = Math.round(Math.random()*n);\r",
                      "    return ranNum;\r",
                      "}\r",
                      "function mod(dividendo,divisor) {\r",
                      "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                      "}\r",
                      "function gera_cpf() {\r",
                      "    const n = 9;\r",
                      "    const n1 = gera_random(n);\r",
                      "    const n2 = gera_random(n);\r",
                      "    const n3 = gera_random(n);\r",
                      "    const n4 = gera_random(n);\r",
                      "    const n5 = gera_random(n);\r",
                      "    const n6 = gera_random(n);\r",
                      "    const n7 = gera_random(n);\r",
                      "    const n8 = gera_random(n);\r",
                      "    const n9 = gera_random(n);\r",
                      "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                      "    d1 = 11 - (mod(d1,11));\r",
                      "    if (d1>=10) d1 = 0;\r",
                      "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                      "    d2 = 11 - (mod(d2,11));\r",
                      "    \r",
                      "    if (d2>=10) d2 = 0;         \r",
                      "      \r",
                      "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                      "}\r",
                      "\r",
                      "// Argentina - DNI\r",
                      "\r",
                      "function rand_dni() {\r",
                      "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                      "  sNum = formatNumberLength( num, 8 );\r",
                      "  return sNum + charDNI( sNum );\r",
                      "}\r",
                      "\r",
                      "function formatNumberLength(num, length) {\r",
                      "  var r = \"\" + num;\r",
                      "  while ( r.length < length ) {\r",
                      "    r = \"0\" + r;\r",
                      "  }\r",
                      "  return r;\r",
                      "}\r",
                      "\r",
                      "function charDNI(dni) {\r",
                      "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                      "  var pos = dni % 23;\r",
                      "  var letter = chain.substring( pos, pos + 1 );\r",
                      "  return letter;\r",
                      "}\r",
                      "\r",
                      "// Chile - RUT\r",
                      "\r",
                      "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                      "  let ruts = [];\r",
                      "  \r",
                      "  const rutOpts = {\r",
                      "    quantity: numberOfRuts,\r",
                      "    minValue: minValue,\r",
                      "    maxValue: maxValue\r",
                      "  };\r",
                      "\r",
                      "  function generateRuts() {\r",
                      "    var e, n, r, u, i;\r",
                      "    n = [];\r",
                      "    t = 0;\r",
                      "    while (t < rutOpts.quantity) {\r",
                      "      i = getRandomNumber();\r",
                      "      r = 0;\r",
                      "      e = false;\r",
                      "      while (r < n.length) {\r",
                      "        if (n[r].number === i) {\r",
                      "          e = true;\r",
                      "          break\r",
                      "        }\r",
                      "        r++\r",
                      "      }\r",
                      "      if (!e) {\r",
                      "        u = getMod(i);\r",
                      "        n.push({\r",
                      "          number: i,\r",
                      "          mod: u\r",
                      "        })\r",
                      "      }\r",
                      "      t++;\r",
                      "    }\r",
                      "    return ruts = n\r",
                      "  };\r",
                      "\r",
                      "  function getRandomNumber() {\r",
                      "    var t, e, n, r;\r",
                      "    r = rutOpts.minValue;\r",
                      "    n = rutOpts.maxValue;\r",
                      "    e = parseInt(t);\r",
                      "    if (!e) {\r",
                      "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                      "    } else {\r",
                      "      return e\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "  function getMod(t) {\r",
                      "    var e, n;\r",
                      "    e = 0;\r",
                      "    n = 1;\r",
                      "    while (t) {\r",
                      "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                      "      t = Math.floor(t / 10)\r",
                      "    }\r",
                      "    if (n) {\r",
                      "      return n - 1\r",
                      "    } else {\r",
                      "      return \"K\"\r",
                      "    }\r",
                      "  };\r",
                      "\r",
                      "\r",
                      "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                      "  if (generatedRuts.length === 1) { \r",
                      "    return generatedRuts[0];\r",
                      "  }\r",
                      "  return generatedRuts;\r",
                      "}\r",
                      "\r",
                      "// Tipo de documentos\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                      "    pm.environment.set(\"document_number\", gera_cpf());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                      "    pm.environment.set(\"document_number\", rand_dni());\r",
                      "}\r",
                      "\r",
                      "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                      "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"payment_id\", data.payment_id);\r",
                      "pm.environment.set(\"payment_method\", data.payment_method);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": {{amount}},\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"25\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"282\",\r\n                \"brand\": \"VISA\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"airline\":{\r\n                \"passenger_code\": \"1259712345\",\r\n                \"company_id\": \"1220\",\r\n                \"airline_code\": \"221\",\r\n                \"travel_agency_code\": \"s517\",\r\n                \"ticket_numbers\":[ \r\n                    \"125769\",\r\n                    \"123343\",\r\n                    \"324255\"\r\n                ]\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Adjustment V2",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 19000,\r\n        \"payment\": {\r\n            \"payment_method\": \"CREDIT_PRE_AUTHORIZATION\",\r\n            \"payment_id\": \"{{payment_id}}\"\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Adjustment V2 with coutas",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "PATCH",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": 41300,\r\n        \"payment\": {\r\n            \"payment_method\": \"CREDIT_PRE_AUTHORIZATION\",\r\n            \"payment_id\": \"{{payment_id}}\"\r\n        }\r\n    },\r\n    \"additional_data\": {\r\n        \"installment\": {\r\n                \"quote_id\": \"{{quote_id}}\",\r\n                \"schema\": \"{{schema}}\"\r\n            }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Capture V2",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"{{payment_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/capture",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "capture"]
                }
              },
              "response": []
            },
            {
              "name": "Cancel V2",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"{{payment_id}}\",\r\n    \"amount\": 120,\r\n    \"payment_method\": \"{{payment_method}}\",\r\n    \"custom_key\": \"Cancelamento_teste_{{$randomAlphaNumeric}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/cancel",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments", "cancel"]
                }
              },
              "response": []
            },
            {
              "name": "Payment info",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/hub-payment-info/v1/payments/info/{{payment_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "hub-payment-info", "v1", "payments", "info", "{{payment_id}}"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Airlines",
          "item": [
            {
              "name": "Payments",
              "item": [
                {
                  "name": "Payments Antifraud V2 CREDIT",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                          "    var data = JSON.parse(responseBody);\r",
                          "    pm.environment.set(\"number_token\", data.number_token);\r",
                          "    //console.log(pm.environment.get('token_visa'))\r",
                          "  });\r",
                          "\r",
                          "\r",
                          "// Brazil - CPF\r",
                          "\r",
                          "function gera_random(n) {\r",
                          "    const ranNum = Math.round(Math.random()*n);\r",
                          "    return ranNum;\r",
                          "}\r",
                          "function mod(dividendo,divisor) {\r",
                          "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                          "}\r",
                          "function gera_cpf() {\r",
                          "    const n = 9;\r",
                          "    const n1 = gera_random(n);\r",
                          "    const n2 = gera_random(n);\r",
                          "    const n3 = gera_random(n);\r",
                          "    const n4 = gera_random(n);\r",
                          "    const n5 = gera_random(n);\r",
                          "    const n6 = gera_random(n);\r",
                          "    const n7 = gera_random(n);\r",
                          "    const n8 = gera_random(n);\r",
                          "    const n9 = gera_random(n);\r",
                          "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                          "    d1 = 11 - (mod(d1,11));\r",
                          "    if (d1>=10) d1 = 0;\r",
                          "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                          "    d2 = 11 - (mod(d2,11));\r",
                          "    \r",
                          "    if (d2>=10) d2 = 0;         \r",
                          "      \r",
                          "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                          "}\r",
                          "\r",
                          "// Argentina - DNI\r",
                          "\r",
                          "function rand_dni() {\r",
                          "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                          "  sNum = formatNumberLength( num, 8 );\r",
                          "  return sNum + charDNI( sNum );\r",
                          "}\r",
                          "\r",
                          "function formatNumberLength(num, length) {\r",
                          "  var r = \"\" + num;\r",
                          "  while ( r.length < length ) {\r",
                          "    r = \"0\" + r;\r",
                          "  }\r",
                          "  return r;\r",
                          "}\r",
                          "\r",
                          "function charDNI(dni) {\r",
                          "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                          "  var pos = dni % 23;\r",
                          "  var letter = chain.substring( pos, pos + 1 );\r",
                          "  return letter;\r",
                          "}\r",
                          "\r",
                          "// Chile - RUT\r",
                          "\r",
                          "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                          "  let ruts = [];\r",
                          "  \r",
                          "  const rutOpts = {\r",
                          "    quantity: numberOfRuts,\r",
                          "    minValue: minValue,\r",
                          "    maxValue: maxValue\r",
                          "  };\r",
                          "\r",
                          "  function generateRuts() {\r",
                          "    var e, n, r, u, i;\r",
                          "    n = [];\r",
                          "    t = 0;\r",
                          "    while (t < rutOpts.quantity) {\r",
                          "      i = getRandomNumber();\r",
                          "      r = 0;\r",
                          "      e = false;\r",
                          "      while (r < n.length) {\r",
                          "        if (n[r].number === i) {\r",
                          "          e = true;\r",
                          "          break\r",
                          "        }\r",
                          "        r++\r",
                          "      }\r",
                          "      if (!e) {\r",
                          "        u = getMod(i);\r",
                          "        n.push({\r",
                          "          number: i,\r",
                          "          mod: u\r",
                          "        })\r",
                          "      }\r",
                          "      t++;\r",
                          "    }\r",
                          "    return ruts = n\r",
                          "  };\r",
                          "\r",
                          "  function getRandomNumber() {\r",
                          "    var t, e, n, r;\r",
                          "    r = rutOpts.minValue;\r",
                          "    n = rutOpts.maxValue;\r",
                          "    e = parseInt(t);\r",
                          "    if (!e) {\r",
                          "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                          "    } else {\r",
                          "      return e\r",
                          "    }\r",
                          "  };\r",
                          "\r",
                          "  function getMod(t) {\r",
                          "    var e, n;\r",
                          "    e = 0;\r",
                          "    n = 1;\r",
                          "    while (t) {\r",
                          "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                          "      t = Math.floor(t / 10)\r",
                          "    }\r",
                          "    if (n) {\r",
                          "      return n - 1\r",
                          "    } else {\r",
                          "      return \"K\"\r",
                          "    }\r",
                          "  };\r",
                          "\r",
                          "\r",
                          "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                          "  if (generatedRuts.length === 1) { \r",
                          "    return generatedRuts[0];\r",
                          "  }\r",
                          "  return generatedRuts;\r",
                          "}\r",
                          "\r",
                          "// Tipo de documentos\r",
                          "\r",
                          "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                          "    pm.environment.set(\"document_number\", gera_cpf());\r",
                          "}\r",
                          "\r",
                          "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                          "    pm.environment.set(\"document_number\", rand_dni());\r",
                          "}\r",
                          "\r",
                          "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                          "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                          "}\r",
                          "\r",
                          "let randomNumber = Math.floor(Math.random() * 10000)\r",
                          "pm.environment.set(\"amount\", randomNumber);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var data = pm.response.json();\r",
                          "pm.environment.set(\"payment_id\", data.payment_id);\r",
                          "pm.environment.set(\"payment_method\", data.payment_method);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "x-seller-id",
                        "value": "{{SELLER_ID}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": {{amount}},\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"25\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"282\",\r\n                \"brand\": \"VISA\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"airline\":{\r\n                \"passenger_code\": \"1259712345\",\r\n                \"company_id\": \"1220\",\r\n                \"airline_code\": \"221\",\r\n                \"travel_agency_code\": \"s517\",\r\n                \"ticket_numbers\":[ \r\n                    \"125769\",\r\n                    \"123343\",\r\n                    \"324255\"\r\n                ]\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                      "host": ["{{URL_PRE_GLOBAL}}"],
                      "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Payments with Installments",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "pm.test(\"Should return status 201 and not be empty\", () => {\r",
                          "    var data = JSON.parse(responseBody);\r",
                          "    pm.environment.set(\"number_token\", data.number_token);\r",
                          "    //console.log(pm.environment.get('token_visa'))\r",
                          "  });\r",
                          "\r",
                          "\r",
                          "// Brazil - CPF\r",
                          "\r",
                          "function gera_random(n) {\r",
                          "    const ranNum = Math.round(Math.random()*n);\r",
                          "    return ranNum;\r",
                          "}\r",
                          "function mod(dividendo,divisor) {\r",
                          "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));\r",
                          "}\r",
                          "function gera_cpf() {\r",
                          "    const n = 9;\r",
                          "    const n1 = gera_random(n);\r",
                          "    const n2 = gera_random(n);\r",
                          "    const n3 = gera_random(n);\r",
                          "    const n4 = gera_random(n);\r",
                          "    const n5 = gera_random(n);\r",
                          "    const n6 = gera_random(n);\r",
                          "    const n7 = gera_random(n);\r",
                          "    const n8 = gera_random(n);\r",
                          "    const n9 = gera_random(n);\r",
                          "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;\r",
                          "    d1 = 11 - (mod(d1,11));\r",
                          "    if (d1>=10) d1 = 0;\r",
                          "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;\r",
                          "    d2 = 11 - (mod(d2,11));\r",
                          "    \r",
                          "    if (d2>=10) d2 = 0;         \r",
                          "      \r",
                          "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;\r",
                          "}\r",
                          "\r",
                          "// Argentina - DNI\r",
                          "\r",
                          "function rand_dni() {\r",
                          "  num = Math.floor( ( Math.random() * 100000000 ) );\r",
                          "  sNum = formatNumberLength( num, 8 );\r",
                          "  return sNum + charDNI( sNum );\r",
                          "}\r",
                          "\r",
                          "function formatNumberLength(num, length) {\r",
                          "  var r = \"\" + num;\r",
                          "  while ( r.length < length ) {\r",
                          "    r = \"0\" + r;\r",
                          "  }\r",
                          "  return r;\r",
                          "}\r",
                          "\r",
                          "function charDNI(dni) {\r",
                          "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";\r",
                          "  var pos = dni % 23;\r",
                          "  var letter = chain.substring( pos, pos + 1 );\r",
                          "  return letter;\r",
                          "}\r",
                          "\r",
                          "// Chile - RUT\r",
                          "\r",
                          "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {\r",
                          "  let ruts = [];\r",
                          "  \r",
                          "  const rutOpts = {\r",
                          "    quantity: numberOfRuts,\r",
                          "    minValue: minValue,\r",
                          "    maxValue: maxValue\r",
                          "  };\r",
                          "\r",
                          "  function generateRuts() {\r",
                          "    var e, n, r, u, i;\r",
                          "    n = [];\r",
                          "    t = 0;\r",
                          "    while (t < rutOpts.quantity) {\r",
                          "      i = getRandomNumber();\r",
                          "      r = 0;\r",
                          "      e = false;\r",
                          "      while (r < n.length) {\r",
                          "        if (n[r].number === i) {\r",
                          "          e = true;\r",
                          "          break\r",
                          "        }\r",
                          "        r++\r",
                          "      }\r",
                          "      if (!e) {\r",
                          "        u = getMod(i);\r",
                          "        n.push({\r",
                          "          number: i,\r",
                          "          mod: u\r",
                          "        })\r",
                          "      }\r",
                          "      t++;\r",
                          "    }\r",
                          "    return ruts = n\r",
                          "  };\r",
                          "\r",
                          "  function getRandomNumber() {\r",
                          "    var t, e, n, r;\r",
                          "    r = rutOpts.minValue;\r",
                          "    n = rutOpts.maxValue;\r",
                          "    e = parseInt(t);\r",
                          "    if (!e) {\r",
                          "      return Math.floor(Math.random() * (n - r + 1)) + r\r",
                          "    } else {\r",
                          "      return e\r",
                          "    }\r",
                          "  };\r",
                          "\r",
                          "  function getMod(t) {\r",
                          "    var e, n;\r",
                          "    e = 0;\r",
                          "    n = 1;\r",
                          "    while (t) {\r",
                          "      n = (n + t % 10 * (9 - e++ % 6)) % 11;\r",
                          "      t = Math.floor(t / 10)\r",
                          "    }\r",
                          "    if (n) {\r",
                          "      return n - 1\r",
                          "    } else {\r",
                          "      return \"K\"\r",
                          "    }\r",
                          "  };\r",
                          "\r",
                          "\r",
                          "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)\r",
                          "  if (generatedRuts.length === 1) { \r",
                          "    return generatedRuts[0];\r",
                          "  }\r",
                          "  return generatedRuts;\r",
                          "}\r",
                          "\r",
                          "// Tipo de documentos\r",
                          "\r",
                          "if (pm.environment.get(\"document_type\") == \"CPF\"){\r",
                          "    pm.environment.set(\"document_number\", gera_cpf());\r",
                          "}\r",
                          "\r",
                          "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){\r",
                          "    pm.environment.set(\"document_number\", rand_dni());\r",
                          "}\r",
                          "\r",
                          "if (pm.environment.get(\"document_type\") == \"RUT\"){\r",
                          "    pm.environment.set(\"document_number\", getRutNumbers(1));\r",
                          "}\r",
                          "\r",
                          "let randomNumber = Math.floor(Math.random() * 10000)\r",
                          "pm.environment.set(\"amount\", randomNumber);\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "var data = pm.response.json();\r",
                          "pm.environment.set(\"payment_id\", data.payment_id);\r",
                          "pm.environment.set(\"payment_method\", data.payment_method);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "x-seller-id",
                        "value": "{{SELLER_ID}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"data\": {\r\n        \"amount\": {{amount}},\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"payment_method\": \"CREDIT_AUTHORIZATION\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"INSTALL_NO_INTEREST\",\r\n            \"number_installments\": 6,\r\n            \"card\": {\r\n                \"expiration_month\": \"12\",\r\n                \"expiration_year\": \"25\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"282\",\r\n                \"brand\": \"VISA\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"airline\":{\r\n                \"passenger_code\": \"1259712345\",\r\n                \"company_id\": \"1220\",\r\n                \"airline_code\": \"221\",\r\n                \"travel_agency_code\": \"s517\",\r\n                \"ticket_numbers\":[ \r\n                    \"125769\",\r\n                    \"144413\"\r\n                ]\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}"
                    },
                    "url": {
                      "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                      "host": ["{{URL_PRE_GLOBAL}}"],
                      "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Capture V2",
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"{{payment_id}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/capture",
                      "host": ["{{URL_PRE_GLOBAL}}"],
                      "path": ["dpm", "payments-gwproxy", "v2", "payments", "capture"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Cancel V2",
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"payment_id\": \"{{payment_id}}\",\r\n    \"amount\": 120,\r\n    \"payment_method\": \"{{payment_method}}\",\r\n    \"custom_key\": \"Cancelamento_teste_{{$randomAlphaNumeric}}\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments/cancel",
                      "host": ["{{URL_PRE_GLOBAL}}"],
                      "path": ["dpm", "payments-gwproxy", "v2", "payments", "cancel"]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Subscription",
          "item": [
            {
              "name": "Add customer",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// Brazil - CPF",
                      "",
                      "function gera_random(n) {",
                      "    const ranNum = Math.round(Math.random()*n);",
                      "    return ranNum;",
                      "}",
                      "function mod(dividendo,divisor) {",
                      "    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));",
                      "}",
                      "function gera_cpf() {",
                      "    const n = 9;",
                      "    const n1 = gera_random(n);",
                      "    const n2 = gera_random(n);",
                      "    const n3 = gera_random(n);",
                      "    const n4 = gera_random(n);",
                      "    const n5 = gera_random(n);",
                      "    const n6 = gera_random(n);",
                      "    const n7 = gera_random(n);",
                      "    const n8 = gera_random(n);",
                      "    const n9 = gera_random(n);",
                      "    let d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;",
                      "    d1 = 11 - (mod(d1,11));",
                      "    if (d1>=10) d1 = 0;",
                      "    let d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;",
                      "    d2 = 11 - (mod(d2,11));",
                      "    ",
                      "    if (d2>=10) d2 = 0;         ",
                      "      ",
                      "    return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;",
                      "}",
                      "",
                      "// Argentina - DNI",
                      "",
                      "function rand_dni() {",
                      "  num = Math.floor( ( Math.random() * 100000000 ) );",
                      "  sNum = formatNumberLength( num, 8 );",
                      "  return sNum + charDNI( sNum );",
                      "}",
                      "",
                      "function formatNumberLength(num, length) {",
                      "  var r = \"\" + num;",
                      "  while ( r.length < length ) {",
                      "    r = \"0\" + r;",
                      "  }",
                      "  return r;",
                      "}",
                      "",
                      "function charDNI(dni) {",
                      "  var chain = \"TRWAGMYFPDXBNJZSQVHLCKET\";",
                      "  var pos = dni % 23;",
                      "  var letter = chain.substring( pos, pos + 1 );",
                      "  return letter;",
                      "}",
                      "",
                      "// Chile - RUT",
                      "",
                      "function getRutNumbers(numberOfRuts=10, minValue=1e6, maxValue=4e7) {",
                      "  let ruts = [];",
                      "  ",
                      "  const rutOpts = {",
                      "    quantity: numberOfRuts,",
                      "    minValue: minValue,",
                      "    maxValue: maxValue",
                      "  };",
                      "",
                      "  function generateRuts() {",
                      "    var e, n, r, u, i;",
                      "    n = [];",
                      "    t = 0;",
                      "    while (t < rutOpts.quantity) {",
                      "      i = getRandomNumber();",
                      "      r = 0;",
                      "      e = false;",
                      "      while (r < n.length) {",
                      "        if (n[r].number === i) {",
                      "          e = true;",
                      "          break",
                      "        }",
                      "        r++",
                      "      }",
                      "      if (!e) {",
                      "        u = getMod(i);",
                      "        n.push({",
                      "          number: i,",
                      "          mod: u",
                      "        })",
                      "      }",
                      "      t++;",
                      "    }",
                      "    return ruts = n",
                      "  };",
                      "",
                      "  function getRandomNumber() {",
                      "    var t, e, n, r;",
                      "    r = rutOpts.minValue;",
                      "    n = rutOpts.maxValue;",
                      "    e = parseInt(t);",
                      "    if (!e) {",
                      "      return Math.floor(Math.random() * (n - r + 1)) + r",
                      "    } else {",
                      "      return e",
                      "    }",
                      "  };",
                      "",
                      "  function getMod(t) {",
                      "    var e, n;",
                      "    e = 0;",
                      "    n = 1;",
                      "    while (t) {",
                      "      n = (n + t % 10 * (9 - e++ % 6)) % 11;",
                      "      t = Math.floor(t / 10)",
                      "    }",
                      "    if (n) {",
                      "      return n - 1",
                      "    } else {",
                      "      return \"K\"",
                      "    }",
                      "  };",
                      "",
                      "",
                      "  let generatedRuts = generateRuts().map(rut => `${rut.number}-${rut.mod}`)",
                      "  if (generatedRuts.length === 1) { ",
                      "    return generatedRuts[0];",
                      "  }",
                      "  return generatedRuts;",
                      "}",
                      "",
                      "// Tipo de documentos",
                      "",
                      "if (pm.environment.get(\"document_type\") == \"CPF\"){",
                      "    pm.environment.set(\"document_number\", gera_cpf());",
                      "}",
                      "",
                      "if (pm.environment.get(\"document_type\") == \"DNI_AR\"){",
                      "    pm.environment.set(\"document_number\", rand_dni());",
                      "}",
                      "",
                      "if (pm.environment.get(\"document_type\") == \"RUT\"){",
                      "    pm.environment.set(\"document_number\", getRutNumbers(1));",
                      "}",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"customer_id\", data.customer_id);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"seller_id\": \"{{SELLER_ID}}\",\n    \"first_name\": \"Roberto\",\n    \"last_name\": \"Picanco\",\n    \"document_type\": \"{{document_type}}\",\n    \"document_number\": \"{{document_number}}\",\n    \"birth_date\": \"1980-09-03\",\n    \"phone_number\": \"5551999887766\",\n    \"celphone_number\": \"5551999887766\",\n    \"email\": \"{{EMAIL_CUSTOMER}}\",\n    \"observation\": \"O cliente tem interesse no plano x.\",\n    \"address\": {\n        \"street\": \"Av Brasil\",\n        \"number\": \"1000\",\n        \"complement\": \"Sala 1\",\n        \"district\": \"Sao Geraldo\",\n        \"city\": \"Porto Alegre\",\n        \"state\": \"RS\",\n        \"country\": \"Brasil\",\n        \"postal_code\": \"90230060\"\n    }\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-customer/v1/customers",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-customer", "v1", "customers"]
                }
              },
              "response": []
            },
            {
              "name": "Add a new CREDIT plan",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"plan_id\", data.plan_id);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["pm.environment.set(\"amount\", Number(require('moment')().format('HHmm')));"],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "tenant",
                    "value": "santander",
                    "disabled": true
                  },
                  {
                    "key": "country",
                    "value": "{{country}}",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"seller_id\": \"{{SELLER_ID}}\",\r\n    \"name\": \"Plano flex\",\r\n    \"description\": \"Plano flex\",\r\n    \"amount\": \"1200\",\r\n    \"currency\": \"{{currency}}\",\r\n    \"payment_types\": [\r\n        \"credit_card\"\r\n    ],\r\n    \"sales_tax\": 0,\r\n    \"product_type\": \"service\",\r\n    \"period\": {\r\n        \"type\": \"specific\",\r\n        \"billing_cycle\": 4,\r\n        \"specific_cycle_in_days\": 1\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-plan/v1/plans",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-plan", "v1", "plans"]
                }
              },
              "response": []
            },
            {
              "name": "Add a new DEBIT plan",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"plan_id\", data.plan_id);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["pm.environment.set(\"amount\", Number(require('moment')().format('HHmm')));"],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"seller_id\": \"{{SELLER_ID}}\",\r\n    \"name\": \"Plano flex\",\r\n    \"description\": \"Plano flex\",\r\n    \"amount\": {{amount}},\r\n    \"currency\": \"{{currency}}\",\r\n    \"payment_types\": [\r\n        \"debit_card\",\r\n        \"credit_card\"\r\n    ],\r\n    \"sales_tax\": 0,\r\n    \"product_type\": \"service\",\r\n    \"period\": {\r\n        \"type\": \"specific\",\r\n        \"billing_cycle\": 3,\r\n        \"specific_cycle_in_days\": 1\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-plan/v1/plans",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-plan", "v1", "plans"]
                }
              },
              "response": []
            },
            {
              "name": "Add a new CREDIT signature",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "try {\r",
                      "    var data = pm.response.json();\r",
                      "    \r",
                      "    pm.test(\"Status code is 201\", function () {\r",
                      "        pm.response.to.have.status(201);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"assinatura foi criada com sucesso\", function () {\r",
                      "        pm.response.to.not.be.error; \r",
                      "        pm.response.to.have.jsonBody(\"status\", \"success\");\r",
                      "        pm.response.to.not.have.jsonBody(\"payment.error\");}\r",
                      "    );\r",
                      "    \r",
                      "    pm.environment.set(\"subscription_id\", data.subscription.subscription_id);\r",
                      "    \r",
                      "} catch(error){}"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"seller_id\": \"6ae8f154-58bf-4553-acaa-17e5071506b0\",\r\n    \"customer_id\": \"{{customer_id}}\",\r\n    \"plan_id\": \"{{plan_id}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"subscription\": {\r\n        \"payment_type\": {\r\n            \"credit\": {\r\n                \"transaction_type\": \"FULL\",\r\n                \"number_installments\": 1,\r\n                \"soft_descriptor\": \"LOJAESTCOMPRA\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Av. Mexico\",\r\n                    \"number\": \"1000\",\r\n                    \"complement\": \"niaa\",\r\n                    \"district\": \"Acapulco\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"mexico\",\r\n                    \"postal_code\": \"39300\"\r\n                },\r\n                \"card\": {\r\n                    \"number_token\": \"{{number_token}}\",\r\n                    \"cardholder_name\": \"ROBERTO PINTO PICANCO\",\r\n                    \"security_code\": \"123\",\r\n                    \"brand\": \"VISA\",\r\n                    \"expiration_month\": \"{{expiration_month}}\",\r\n                    \"expiration_year\": \"{{expiration_year}}\",\r\n                    \"bin\": \"52131204\"\r\n                }\r\n            }\r\n        },\r\n        \"shippings\": [\r\n            {\r\n                \"first_name\": \"Roberto\",\r\n                \"last_name\": \"Picanço\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"551999887766\",\r\n                \"shipping_amount\": 3000,\r\n                \"address\": {\r\n                    \"street\": \"Av chile\",\r\n                    \"number\": \"1000\",\r\n                    \"complement\": \"Sala 1\",\r\n                    \"district\": \"Sao Geraldo\",\r\n                    \"city\": \"Porto Alegre\",\r\n                    \"state\": \"RS\",\r\n                    \"country\": \"Brasil\",\r\n                    \"postal_code\": \"90230060\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"device\": {\r\n        \"ip_address\": \"127.0.0.1\",\r\n        \"device_id\": \"hash-device-id\"\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-subscription/v1/subscriptions",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-subscription", "v1", "subscriptions"]
                }
              },
              "response": []
            },
            {
              "name": "Add a new DEBIT signature",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "try {\r",
                      "    var data = pm.response.json();\r",
                      "    \r",
                      "    pm.test(\"Status code is 201\", function () {\r",
                      "        pm.response.to.have.status(201);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"assinatura foi criada com sucesso\", function () {\r",
                      "        pm.response.to.not.be.error; \r",
                      "        pm.response.to.have.jsonBody(\"status\", \"success\");\r",
                      "        pm.response.to.not.have.jsonBody(\"payment.error\");}\r",
                      "    );\r",
                      "    \r",
                      "    pm.environment.set(\"subscription_id\", data.subscription.subscription_id);\r",
                      "    \r",
                      "} catch(error){}"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}"
                  },
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"seller_id\": \"{{SELLER_ID}}\",\r\n    \"customer_id\": \"{{customer_id}}\",\r\n    \"plan_id\": \"{{plan_id}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"subscription\": {\r\n        \"payment_type\": {\r\n            \"debit\": {\r\n                \"transaction_type\": \"FULL\",\r\n                \"number_installments\": 1,\r\n                \"soft_descriptor\": \"LOJA*TESTE*COMPRA-123\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Av. Brasil\",\r\n                    \"number\": \"1000\",\r\n                    \"complement\": \"niaa\",\r\n                    \"district\": \"Sao Geraldo\",\r\n                    \"city\": \"Porto Alegre\",\r\n                    \"state\": \"RS\",\r\n                    \"country\": \"Brasil\",\r\n                    \"postal_code\": \"90230060\"\r\n                },\r\n                \"card\": {\r\n                    \"number_token\": \"{{number_token}}\",\r\n                    \"cardholder_name\": \"ROBERTO PINTO PICANCO\",\r\n                    \"security_code\": \"123\",\r\n                    \"brand\": \"MASTERCARD\",\r\n                    \"expiration_month\": \"{{expiration_month}}\",\r\n                    \"expiration_year\": \"{{expiration_year}}\",\r\n                    \"bin\": \"549180\"\r\n                }\r\n            }\r\n        },\r\n        \"shippings\": [\r\n            {\r\n                \"first_name\": \"Roberto\",\r\n                \"last_name\": \"Picanço\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"551999887766\",\r\n                \"shipping_amount\": 3000,\r\n                \"address\": {\r\n                    \"street\": \"Av Brasil\",\r\n                    \"number\": \"1000\",\r\n                    \"complement\": \"Sala 1\",\r\n                    \"district\": \"Sao Geraldo\",\r\n                    \"city\": \"Porto Alegre\",\r\n                    \"state\": \"RS\",\r\n                    \"country\": \"Brasil\",\r\n                    \"postal_code\": \"90230060\"\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    \"device\": {\r\n        \"ip_address\": \"127.0.0.1\",\r\n        \"device_id\": \"hash-device-id\"\r\n    }\r\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-subscription/v1/subscriptions",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-subscription", "v1", "subscriptions"]
                }
              },
              "response": []
            },
            {
              "name": "Validate constance of signature",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": ["// Aguarda 20 segundos para iniciar as validações", "setTimeout(function(){}, 15000)"],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "Date.isLeapYear = function (year) { ",
                      "    return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)); ",
                      "};",
                      "",
                      "Date.getDaysInMonth = function (year, month) {",
                      "    return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];",
                      "};",
                      "",
                      "Date.prototype.isLeapYear = function () { ",
                      "    return Date.isLeapYear(this.getFullYear()); ",
                      "};",
                      "",
                      "Date.prototype.getDaysInMonth = function () { ",
                      "    return Date.getDaysInMonth(this.getFullYear(), this.getMonth());",
                      "};",
                      "",
                      "Date.prototype.addMonths = function (value) {",
                      "    var n = this.getDate();",
                      "    this.setDate(1);",
                      "    this.setMonth(this.getMonth() + value);",
                      "    this.setDate(Math.min(n, this.getDaysInMonth()));",
                      "    return this;",
                      "};",
                      "",
                      "// Recupera a data agendada da resposta ",
                      "const jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Valor do plano na assinatura validado com sucesso\", function () {",
                      "    pm.expect(jsonData.plan.amount).to.eql(pm.environment.get(\"amount\"));",
                      "});",
                      "",
                      "// Valida a data agendada com a data devida",
                      "pm.test('Valida a data agendada de acordo com a periodicidade', function () {",
                      "    let dateScheduledReceived = jsonData.next_scheduled_date;",
                      "    ",
                      "    const data_agendada_recebida = new Date(dateScheduledReceived.substring(5,7) + \"/\" + dateScheduledReceived.substring(8,10) + \"/\" + dateScheduledReceived.substring(0,4));",
                      "   ",
                      "    //Adiciona o mes de acordo com a periodicidade",
                      "    let dateScheduledDue = new Date();",
                      "    dateScheduledDue.addMonths(1);",
                      "    ",
                      "    const data_agendada_devida = new Date((dateScheduledDue.getMonth()+1) + \"/\" + dateScheduledDue.getDate() + \"/\" + dateScheduledDue.getFullYear());",
                      "    ",
                      "    const result = data_agendada_recebida.getTime() === data_agendada_devida.getTime();",
                      "    ",
                      "    pm.expect(result).to.eql(true);",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}"
                  },
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-subscription/v1/subscriptions/{{subscription_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-subscription", "v1", "subscriptions", "{{subscription_id}}"]
                }
              },
              "response": []
            },
            {
              "name": "Search first charge by online paid",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Recupera a data agendada da resposta \r",
                      "const jsonData = JSON.parse(responseBody);\r",
                      "pm.environment.set(\"charge_id\", jsonData.charges[0].charge_id);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}"
                  },
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/adapter-charge/v1/charges?page=1&limit=100&subscription_id={{subscription_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "adapter-charge", "v1", "charges"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "subscription_id",
                      "value": "{{subscription_id}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Validate charge paid online",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Recupera a data agendada da resposta \r",
                      "const jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"response is ok\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Status da cobrança validada com sucesso', function () {\r",
                      "    pm.expect(jsonData.status).to.eql(\"paid\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Valor da parcela validado com sucesso\", function () {\r",
                      "    pm.expect(jsonData.amount).to.eql(pm.environment.get(\"amount\"));\r",
                      "});\r",
                      "\r",
                      "pm.test('Número da parcela validada com sucesso', function () {\r",
                      "    pm.expect(jsonData.billing_number).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/adapter-charge/v1/charges/{{charge_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "adapter-charge", "v1", "charges", "{{charge_id}}"]
                }
              },
              "response": []
            },
            {
              "name": "Search first charge created by signature id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Recupera a data agendada da resposta \r",
                      "const jsonData = JSON.parse(responseBody);\r",
                      "pm.environment.set(\"charge_id\", jsonData.charges[0].charge_id);\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}"
                  },
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/adapter-charge/v1/charges?page=1&limit=100&subscription_id={{subscription_id}}&status=scheduled",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "adapter-charge", "v1", "charges"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    },
                    {
                      "key": "subscription_id",
                      "value": "{{subscription_id}}"
                    },
                    {
                      "key": "status",
                      "value": "scheduled"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Validate Scheduling recurrence billing",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "Date.isLeapYear = function (year) { \r",
                      "    return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)); \r",
                      "};\r",
                      "\r",
                      "Date.getDaysInMonth = function (year, month) {\r",
                      "    return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\r",
                      "};\r",
                      "\r",
                      "Date.prototype.isLeapYear = function () { \r",
                      "    return Date.isLeapYear(this.getFullYear()); \r",
                      "};\r",
                      "\r",
                      "Date.prototype.getDaysInMonth = function () { \r",
                      "    return Date.getDaysInMonth(this.getFullYear(), this.getMonth());\r",
                      "};\r",
                      "\r",
                      "Date.prototype.addMonths = function (value) {\r",
                      "    var n = this.getDate();\r",
                      "    this.setDate(1);\r",
                      "    this.setMonth(this.getMonth() + value);\r",
                      "    this.setDate(Math.min(n, this.getDaysInMonth()));\r",
                      "    return this;\r",
                      "};\r",
                      "\r",
                      "// Recupera a data agendada da resposta \r",
                      "const jsonData = JSON.parse(responseBody);\r",
                      "\r",
                      "pm.test(\"response is ok\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Status da cobrança validada com sucesso', function () {\r",
                      "    pm.expect(jsonData.status).to.eql(\"scheduled\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Valor da parcela validado com sucesso\", function () {\r",
                      "    pm.expect(jsonData.amount).to.eql(pm.environment.get(\"amount\"));\r",
                      "});\r",
                      "\r",
                      "pm.test('Número da parcela validada com sucesso', function () {\r",
                      "    pm.expect(jsonData.billing_number).to.eql(2);\r",
                      "});\r",
                      "    \r",
                      "// Valida a data agendada com a data devida\r",
                      "pm.test('Data de agendamento da cobrança valida de acordo com a periodicidade', function () {\r",
                      "    let dateScheduledReceived = jsonData.scheduled_date;\r",
                      "    \r",
                      "    const data_agendada_recebida = new Date(dateScheduledReceived.substring(5,7) + \"/\" + dateScheduledReceived.substring(8,10) + \"/\" + dateScheduledReceived.substring(0,4));\r",
                      "   \r",
                      "    //Adiciona o mes de acordo com a periodicidade\r",
                      "    let dateScheduledDue = new Date();\r",
                      "    dateScheduledDue.addMonths(1);\r",
                      "    \r",
                      "    const data_agendada_devida = new Date((dateScheduledDue.getMonth()+1) + \"/\" + dateScheduledDue.getDate() + \"/\" + dateScheduledDue.getFullYear());\r",
                      "    \r",
                      "    const result = data_agendada_recebida.getTime() === data_agendada_devida.getTime();\r",
                      "    \r",
                      "    pm.expect(result).to.eql(true);\r",
                      "});"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-type",
                    "value": "application/json"
                  },
                  {
                    "key": "Tenant",
                    "value": "santander"
                  },
                  {
                    "key": "Country",
                    "value": "{{country}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/adapter-charge/v1/charges/{{charge_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "adapter-charge", "v1", "charges", "{{charge_id}}"]
                }
              },
              "response": []
            },
            {
              "name": "Find customer",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  },
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-customer/v1/customers?page=1&limit=10",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-customer", "v1", "customers"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Find plan",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  },
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-plan/v1/plans/{{plan_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-plan", "v1", "plans", "{{plan_id}}"]
                }
              },
              "response": []
            },
            {
              "name": "Consulta subscription",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [
                  {
                    "key": "tenant",
                    "value": "santander"
                  },
                  {
                    "key": "country",
                    "value": "{{country}}"
                  },
                  {
                    "key": "x-seller-id",
                    "value": "{{SELLER_ID}}"
                  }
                ],
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/rpy/be-subscription/v1/subscriptions/{{subscription_id}}",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["rpy", "be-subscription", "v1", "subscriptions", "{{subscription_id}}"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "3DS",
          "item": [
            {
              "name": "Card 3DS token Generator",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function removeJsonComments(jsonString) {\r",
                      "    //remove os comentarios para conseguir converter o json em objeto\r",
                      "    jsonString = jsonString.replace(/\\/\\/.*$/gm, '');\r",
                      "    jsonString = jsonString.replace(/\\/\\*[\\s\\S]*?\\*\\//g, '');\r",
                      "    return jsonString;\r",
                      "}\r",
                      "\r",
                      "var requestBody = pm.request.body.raw;\r",
                      "var cleanJsonBody = removeJsonComments(requestBody);\r",
                      "try{\r",
                      "    var bodyJson = JSON.parse(cleanJsonBody);\r",
                      "    var valueToSave = bodyJson.card_number;\r",
                      "    pm.environment.set(\"card_number\", valueToSave)\r",
                      "} catch (e){\r",
                      "    console.error(\"Erro ao analisar o Json do corpo da requisição\", e);\r",
                      "}\r",
                      "\r",
                      "\r",
                      "    /*\r",
                      "        VISA\t4524880000001119\tChallenge\r",
                      "        VISA\t4784024904470892\tFrictionless A\r",
                      "        VISA\t4055310000003334\tFrictionless Y\r",
                      "        MASTER\t5188340000000060\tChallenge\r",
                      "        MASTER\t5105410000088330\tFrictionless\r",
                      "        MASTER\t5308418330410236\tFrictionless\r",
                      "        AMEX\t376206000000366\tChallenge\r",
                      "        AMEX\t376206000000037\tFrictionless A\r",
                      "        AMEX\t376206000000002\tFrictionless Y\r",
                      "    */"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"number_token\", data.number_token);\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"card_number\": \"4784024904470892\"\n\n}"
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/cofre-gw-proxy/v1/tokens/card",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "cofre-gw-proxy", "v1", "tokens", "card"]
                }
              },
              "response": []
            },
            {
              "name": "Enrolments initial",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"transaction_id\", data.transaction_id);\r",
                      "pm.environment.set(\"xid\", data.xid);\r",
                      "pm.environment.set(\"tdsver\", data.protocol);\r",
                      "pm.environment.set(\"eci\", data.eci);\r",
                      "pm.environment.set(\"ucaf\", data.cavv);\r",
                      "pm.environment.set(\"tx_id\", data.tx_id);\r",
                      "\r",
                      "var response = pm.response.json();\r",
                      "console.log(unescape(response.redirect_html_template))\r",
                      "\r",
                      "pm.visualizer.set(unescape(response.redirect_html_template));\r",
                      "console.log(response.redirect_html_template)"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "accept",
                    "value": "*/*"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"currency\": \"{{currency}}\",\r\n    \"md\": \"NmQyZTQzODAtZDhhMy00Y2NiLTkxMzgtYzI4OTE4MjgxOGE0\",\r\n    \"term_url\": \"https://webhook.site/c985575f-b054-46f7-b839-a7928e8b42bd\",\r\n    \"amount\": 100202,\r\n    \"payment_method\": {\r\n        \"number_token\": \"{{number_token}}\",\r\n        \"security_code\": \"123\",\r\n        \"expiration_month\": \"10\",\r\n        \"expiration_year\": \"28\"\r\n    },\r\n    \"recurring\": {\r\n\t\t\"recurring_frequency\": 1,\r\n\t\t\"recurring_end_date\": \"20241215\"\r\n\t},\r\n    \"description\": \"Testes de produto\",\r\n    \"operation\": \"CREDIT\",\r\n    \"extra_fields\": {\r\n        \"billing_address\": {\r\n            \"street\": \"Av. Brasil\",\r\n            \"number\": \"1000\",\r\n            \"complement\": \"Sala 1\",\r\n            \"district\": \"Sao Geraldo\",\r\n            \"city\": \"Porto Alegre\",\r\n            \"state\": \"RS\",\r\n            \"country\": \"484\",\r\n            \"postal_code\": \"90230060\",\r\n            \"reference\": \"Near the hospital\"\r\n        },\r\n        \"shipping_address\": {\r\n            \"street\": \"Av. Brasil\",\r\n            \"number\": \"1000\",\r\n            \"complement\": \"Sala 1\",\r\n            \"district\": \"Sao Geraldo\",\r\n            \"city\": \"Porto Alegre\",\r\n            \"state\": \"RS\",\r\n            \"country\": \"484\",\r\n            \"postal_code\": \"90230060\",\r\n            \"reference\": \"Near the hospital\"\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/security-gwproxy/v2/enrolments-initial",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "security-gwproxy", "v2", "enrolments-initial"]
                },
                "description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://gms-dpm-security-gwproxy-ms-java.app.uat.gms.corp/v2/enrolments-initial' \\\r\n  -H 'accept: */*' \\\r\n  -H 'x-seller-id: bcccda6e-5d77-49c0-b291-4cf235b2a47f' \\\r\n  -H 'tenant: satander' \\\r\n  -H 'country: AR' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"currency\": \"string\",\r\n  \"md\": \"string\",\r\n  \"term_url\": \"string\",\r\n  \"amount\": 0,\r\n  \"payment_method\": {\r\n    \"number_token\": \"string\",\r\n    \"security_code\": \"string\",\r\n    \"expiration_month\": \"string\",\r\n    \"expiration_year\": \"string\"\r\n  },\r\n  \"description\": \"string\",\r\n  \"operation\": \"string\",\r\n  \"extra_fields\": {\r\n    \"billing_address\": {\r\n      \"street\": \"string\",\r\n      \"number\": \"string\",\r\n      \"complement\": \"string\",\r\n      \"district\": \"string\",\r\n      \"city\": \"string\",\r\n      \"state\": \"string\",\r\n      \"country\": \"string\",\r\n      \"postal_code\": \"string\",\r\n      \"reference\": \"string\"\r\n    },\r\n    \"shipping_address\": {\r\n      \"street\": \"string\",\r\n      \"number\": \"string\",\r\n      \"complement\": \"string\",\r\n      \"district\": \"string\",\r\n      \"city\": \"string\",\r\n      \"state\": \"string\",\r\n      \"country\": \"string\",\r\n      \"postal_code\": \"string\",\r\n      \"reference\": \"string\"\r\n    }\r\n  }\r\n}'"
              },
              "response": []
            },
            {
              "name": "Enrolments continue",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"transaction_id\", data.transaction_id);\r",
                      "pm.environment.set(\"xid\", data.xid);\r",
                      "pm.environment.set(\"tdsver\", data.protocol);\r",
                      "pm.environment.set(\"eci\", data.eci);\r",
                      "pm.environment.set(\"ucaf\", data.cavv);\r",
                      "pm.environment.set(\"tx_id\", data.tx_id);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "accept",
                    "value": "*/*"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"transaction_id\": \"{{transaction_id}}\",\r\n  \"xid\": \"{{xid}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/security-gwproxy/v2/enrolments-continue",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "security-gwproxy", "v2", "enrolments-continue"]
                },
                "description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://gms-dpm-security-gwproxy-ms-java.app.uat.gms.corp/v2/enrolments-continue' \\\r\n  -H 'accept: */*' \\\r\n  -H 'x-seller-id: bcccda6e-5d77-49c0-b291-4cf235b2a47f' \\\r\n  -H 'tenant: santander' \\\r\n  -H 'country: AR' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"transaction_id\": \"string\",\r\n  \"xid\": \"string\"\r\n}'"
              },
              "response": []
            },
            {
              "name": "Validations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var data = pm.response.json();\r",
                      "pm.environment.set(\"transaction_id\", data.transaction_id);\r",
                      "pm.environment.set(\"xid\", data.xid);\r",
                      "pm.environment.set(\"tdsver\", data.protocol);\r",
                      "pm.environment.set(\"eci\", data.eci);\r",
                      "pm.environment.set(\"ucaf\", data.cavv);\r",
                      "pm.environment.set(\"tx_id\", data.tx_id);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "accept",
                    "value": "*/*"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"token\": \"ewogICJhY3NUcmFuc0lEIiA6ICI5ZWVkZDgwMy02YTRhLTRkM2EtODQ3Ni1lMjM0NWEwZWE0YmYiLAogICJtZXNzYWdlVHlwZSIgOiAiQ1JlcyIsCiAgIm1lc3NhZ2VWZXJzaW9uIiA6ICIyLjIuMCIsCiAgInRocmVlRFNTZXJ2ZXJUcmFuc0lEIiA6ICIyOWY2MGVjMi01NzIwLTUxZTAtODAwMC0wMDAwMDIyZGY2OGYiLAogICJ0cmFuc1N0YXR1cyIgOiAiWSIKfQ\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/security-gwproxy/v2/validations",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "security-gwproxy", "v2", "validations"]
                },
                "description": "Generated from cURL: curl -X 'POST' \\\r\n  'https://gms-dpm-security-gwproxy-ms-java.app.uat.gms.corp/v2/validations' \\\r\n  -H 'accept: */*' \\\r\n  -H 'x-seller-id: bcccda6e-5d77-49c0-b291-4cf235b2a47f' \\\r\n  -H 'tenant: santander' \\\r\n  -H 'country: AR' \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n  \"token\": \"string\"\r\n}'"
              },
              "response": []
            },
            {
              "name": "Payments 3DS",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"dynamic_mcc\": 1799,\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"xid\": \"{{xid}}\",\r\n            \"ucaf\": \"{{ucaf}}\",\r\n            \"eci\": \"{{eci}}\",\r\n            \"tdsdsxid\": \"{{transaction_id}}\",\r\n            \"tdsver\": \"2.2.0\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"11\",\r\n                \"expiration_year\": \"29\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"801\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            },
            {
              "name": "Payments 3DS Copy",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"idempotency_key\": \"{{$guid}}\",\r\n    \"request_id\": \"{{$guid}}\",\r\n    \"order_id\": \"{{$guid}}\",\r\n    \"dynamic_mcc\": 1799,\r\n    \"data\": {\r\n        \"amount\": 41200,\r\n        \"currency\": \"{{currency}}\",\r\n        \"customer_id\": \"marcos_13\",\r\n        \"payment\": {\r\n            \"payment_id\": \"{{$guid}}\",\r\n            \"xid\": \"{{xid}}\",\r\n            \"ucaf\": \"{{ucaf}}\",\r\n            \"eci\": \"{{eci}}\",\r\n            \"tdsdsxid\": \"{{transaction_id}}\",\r\n            \"tdsver\": \"2.2.0\",\r\n            \"payment_method\": \"CREDIT\",\r\n            \"save_card_data\": false,\r\n            \"transaction_type\": \"FULL\",\r\n            \"number_installments\": 1,\r\n            \"card\": {\r\n                \"expiration_month\": \"11\",\r\n                \"expiration_year\": \"29\",\r\n                \"cardholder_name\": \"TESTE TESTE\",\r\n                \"security_code\": \"801\",\r\n                \"number_token\": \"{{number_token}}\"\r\n            }\r\n        },\r\n        \"additional_data\": {\r\n            \"device\": {\r\n                \"ip_address\": \"10.191.62.9\",\r\n                \"device_id\": \"TESTE_PLATAFORMA_DIGITAL_ANTIFRAUDE_2023\"\r\n            },\r\n            \"customer\": {\r\n                \"shippings\": {\r\n                    \"address\": {\r\n                        \"street\": \"Avenida Mexico\",\r\n                        \"number\": \"100\",\r\n                        \"complement\": \"\",\r\n                        \"district\": \"Progreso\",\r\n                        \"city\": \"Acapulco\",\r\n                        \"state\": \"Guerrero\",\r\n                        \"country\": \"Mexico\",\r\n                        \"postal_code\": \"39300\",\r\n                        \"type\": \"RESIDENCIAL\"\r\n                    }\r\n                },\r\n                \"customer_id\": \"72982307006\",\r\n                \"document_type\": \"{{document_type}}\",\r\n                \"document_number\": \"{{document_number}}\",\r\n                \"first_name\": \"teste\",\r\n                \"last_name\": \"teste\",\r\n                \"name\": \"teste teste\",\r\n                \"email\": \"{{EMAIL_CUSTOMER}}\",\r\n                \"phone_number\": \"11923456789\",\r\n                \"billing_address\": {\r\n                    \"street\": \"Avenida Mexico\",\r\n                    \"number\": \"100\",\r\n                    \"complement\": \"\",\r\n                    \"district\": \"Progreso\",\r\n                    \"city\": \"Acapulco\",\r\n                    \"state\": \"Guerrero\",\r\n                    \"country\": \"Mexico\",\r\n                    \"postal_code\": \"39300\",\r\n                    \"type\": \"RESIDENCIAL\"\r\n                }\r\n            },\r\n            \"order\": {\r\n                \"items\": [\r\n                    {\r\n                        \"name\": \"Climatizador de Ar Cadence Climatize Compact CLI30\",\r\n                        \"quantity\": 1,\r\n                        \"sku\": \"11835803\",\r\n                        \"price\": 412.0\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/payments",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "payments"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Binlookup",
          "item": [
            {
              "name": "Bin query",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "/*Cards AR\r\n    CABAL - 6502720013589570 cvv 699 validade 11-29\r\n          - 6500870076437051 cvv 254 validade 11-29\r\n    NARANJA - 5895625664145911\r\n    AMEX - 373953192351004   cvv = 8031   validade = 12/24\r\n    VISA - 4123220000000909 - CREDIT\r\n\t     - 4231390000011336 - CREDIT\r\n\t     - 4517510000000931 - DEBIT\r\n    MASTER - 5308418330410236 - CREDIT\r\n\t       - 5491800000000537 - DEBIT\r\n    Card CL\r\n    5213120418132948 - Mastercard domestico\r\n    5110420000006938 - Mastercard internacional\r\n    4508830000001759 - Visa domestico\r\n    4025240000000948 - Visa internacional \r\n    37667202091579261 - Amex internacional \r\n    Cards MX\r\n    5188999100986013 - Mastercard - Credito\r\n    4931350008098878 - Visa - Credito\r\n    5062650005970377 - Carnet (Nacional) - Débito\r\n    376674798472005 / Venc. 02/26, Cvv 5595 - Amex - Credito\r\n    6510000000000810 - Discover (Nacional) - Credito\r\n    */",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{URL_PRE_GLOBAL}}/dpm/payments-gwproxy/v2/cards/binlookup/41232200",
                  "host": ["{{URL_PRE_GLOBAL}}"],
                  "path": ["dpm", "payments-gwproxy", "v2", "cards", "binlookup", "41232200"]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ]
}
